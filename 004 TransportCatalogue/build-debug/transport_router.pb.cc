// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_router.proto

#include "transport_router.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace transport_catalogue_proto {
PROTOBUF_CONSTEXPR RoutingSettings::RoutingSettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bus_velocity_kmh_)*/0
  , /*decltype(_impl_.bus_wait_time_minutes_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoutingSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutingSettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutingSettingsDefaultTypeInternal() {}
  union {
    RoutingSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutingSettingsDefaultTypeInternal _RoutingSettings_default_instance_;
PROTOBUF_CONSTEXPR StopVertexIds::StopVertexIds(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stop_)*/0u
  , /*decltype(_impl_.in_)*/0u
  , /*decltype(_impl_.out_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StopVertexIdsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopVertexIdsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopVertexIdsDefaultTypeInternal() {}
  union {
    StopVertexIds _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopVertexIdsDefaultTypeInternal _StopVertexIds_default_instance_;
PROTOBUF_CONSTEXPR VertexInfo::VertexInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stop_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VertexInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VertexInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VertexInfoDefaultTypeInternal() {}
  union {
    VertexInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VertexInfoDefaultTypeInternal _VertexInfo_default_instance_;
PROTOBUF_CONSTEXPR BusEdgeInfo::BusEdgeInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bus_)*/0u
  , /*decltype(_impl_.span_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BusEdgeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BusEdgeInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BusEdgeInfoDefaultTypeInternal() {}
  union {
    BusEdgeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BusEdgeInfoDefaultTypeInternal _BusEdgeInfo_default_instance_;
PROTOBUF_CONSTEXPR WaitEdgeInfo::WaitEdgeInfo(
    ::_pbi::ConstantInitialized) {}
struct WaitEdgeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WaitEdgeInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WaitEdgeInfoDefaultTypeInternal() {}
  union {
    WaitEdgeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WaitEdgeInfoDefaultTypeInternal _WaitEdgeInfo_default_instance_;
PROTOBUF_CONSTEXPR EdgeInfo::EdgeInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct EdgeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdgeInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdgeInfoDefaultTypeInternal() {}
  union {
    EdgeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdgeInfoDefaultTypeInternal _EdgeInfo_default_instance_;
PROTOBUF_CONSTEXPR TransportRouter::TransportRouter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stops_vertex_ids_)*/{}
  , /*decltype(_impl_.vertices_info_)*/{}
  , /*decltype(_impl_.edges_info_)*/{}
  , /*decltype(_impl_.routing_settings_)*/nullptr
  , /*decltype(_impl_.graph_)*/nullptr
  , /*decltype(_impl_.router_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransportRouterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransportRouterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransportRouterDefaultTypeInternal() {}
  union {
    TransportRouter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransportRouterDefaultTypeInternal _TransportRouter_default_instance_;
}  // namespace transport_catalogue_proto
static ::_pb::Metadata file_level_metadata_transport_5frouter_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_transport_5frouter_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_transport_5frouter_2eproto = nullptr;

const uint32_t TableStruct_transport_5frouter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::RoutingSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::RoutingSettings, _impl_.bus_wait_time_minutes_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::RoutingSettings, _impl_.bus_velocity_kmh_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::StopVertexIds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::StopVertexIds, _impl_.stop_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::StopVertexIds, _impl_.in_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::StopVertexIds, _impl_.out_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::VertexInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::VertexInfo, _impl_.stop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::BusEdgeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::BusEdgeInfo, _impl_.bus_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::BusEdgeInfo, _impl_.span_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::WaitEdgeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::EdgeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::EdgeInfo, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::EdgeInfo, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::TransportRouter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::TransportRouter, _impl_.routing_settings_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::TransportRouter, _impl_.graph_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::TransportRouter, _impl_.router_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::TransportRouter, _impl_.stops_vertex_ids_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::TransportRouter, _impl_.vertices_info_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::TransportRouter, _impl_.edges_info_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::transport_catalogue_proto::RoutingSettings)},
  { 8, -1, -1, sizeof(::transport_catalogue_proto::StopVertexIds)},
  { 17, -1, -1, sizeof(::transport_catalogue_proto::VertexInfo)},
  { 24, -1, -1, sizeof(::transport_catalogue_proto::BusEdgeInfo)},
  { 32, -1, -1, sizeof(::transport_catalogue_proto::WaitEdgeInfo)},
  { 38, -1, -1, sizeof(::transport_catalogue_proto::EdgeInfo)},
  { 47, -1, -1, sizeof(::transport_catalogue_proto::TransportRouter)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::transport_catalogue_proto::_RoutingSettings_default_instance_._instance,
  &::transport_catalogue_proto::_StopVertexIds_default_instance_._instance,
  &::transport_catalogue_proto::_VertexInfo_default_instance_._instance,
  &::transport_catalogue_proto::_BusEdgeInfo_default_instance_._instance,
  &::transport_catalogue_proto::_WaitEdgeInfo_default_instance_._instance,
  &::transport_catalogue_proto::_EdgeInfo_default_instance_._instance,
  &::transport_catalogue_proto::_TransportRouter_default_instance_._instance,
};

const char descriptor_table_protodef_transport_5frouter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026transport_router.proto\022\031transport_cata"
  "logue_proto\032\013graph.proto\"J\n\017RoutingSetti"
  "ngs\022\035\n\025bus_wait_time_minutes\030\001 \001(\005\022\030\n\020bu"
  "s_velocity_kmh\030\002 \001(\001\"6\n\rStopVertexIds\022\014\n"
  "\004stop\030\001 \001(\r\022\n\n\002in\030\002 \001(\r\022\013\n\003out\030\003 \001(\r\"\032\n\n"
  "VertexInfo\022\014\n\004stop\030\001 \001(\r\".\n\013BusEdgeInfo\022"
  "\013\n\003bus\030\001 \001(\r\022\022\n\nspan_count\030\002 \001(\r\"\016\n\014Wait"
  "EdgeInfo\"\214\001\n\010EdgeInfo\022:\n\010bus_data\030\001 \001(\0132"
  "&.transport_catalogue_proto.BusEdgeInfoH"
  "\000\022<\n\twait_data\030\002 \001(\0132\'.transport_catalog"
  "ue_proto.WaitEdgeInfoH\000B\006\n\004data\"\352\002\n\017Tran"
  "sportRouter\022D\n\020routing_settings\030\001 \001(\0132*."
  "transport_catalogue_proto.RoutingSetting"
  "s\0221\n\005graph\030\002 \001(\0132\".graph_proto.DirectedW"
  "eightedGraph\022#\n\006router\030\003 \001(\0132\023.graph_pro"
  "to.Router\022B\n\020stops_vertex_ids\030\004 \003(\0132(.tr"
  "ansport_catalogue_proto.StopVertexIds\022<\n"
  "\rvertices_info\030\005 \003(\0132%.transport_catalog"
  "ue_proto.VertexInfo\0227\n\nedges_info\030\006 \003(\0132"
  "#.transport_catalogue_proto.EdgeInfob\006pr"
  "oto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_transport_5frouter_2eproto_deps[1] = {
  &::descriptor_table_graph_2eproto,
};
static ::_pbi::once_flag descriptor_table_transport_5frouter_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_transport_5frouter_2eproto = {
    false, false, 804, descriptor_table_protodef_transport_5frouter_2eproto,
    "transport_router.proto",
    &descriptor_table_transport_5frouter_2eproto_once, descriptor_table_transport_5frouter_2eproto_deps, 1, 7,
    schemas, file_default_instances, TableStruct_transport_5frouter_2eproto::offsets,
    file_level_metadata_transport_5frouter_2eproto, file_level_enum_descriptors_transport_5frouter_2eproto,
    file_level_service_descriptors_transport_5frouter_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_transport_5frouter_2eproto_getter() {
  return &descriptor_table_transport_5frouter_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_transport_5frouter_2eproto(&descriptor_table_transport_5frouter_2eproto);
namespace transport_catalogue_proto {

// ===================================================================

class RoutingSettings::_Internal {
 public:
};

RoutingSettings::RoutingSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_proto.RoutingSettings)
}
RoutingSettings::RoutingSettings(const RoutingSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoutingSettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bus_velocity_kmh_){}
    , decltype(_impl_.bus_wait_time_minutes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.bus_velocity_kmh_, &from._impl_.bus_velocity_kmh_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bus_wait_time_minutes_) -
    reinterpret_cast<char*>(&_impl_.bus_velocity_kmh_)) + sizeof(_impl_.bus_wait_time_minutes_));
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_proto.RoutingSettings)
}

inline void RoutingSettings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bus_velocity_kmh_){0}
    , decltype(_impl_.bus_wait_time_minutes_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoutingSettings::~RoutingSettings() {
  // @@protoc_insertion_point(destructor:transport_catalogue_proto.RoutingSettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoutingSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoutingSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoutingSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_proto.RoutingSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.bus_velocity_kmh_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bus_wait_time_minutes_) -
      reinterpret_cast<char*>(&_impl_.bus_velocity_kmh_)) + sizeof(_impl_.bus_wait_time_minutes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingSettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 bus_wait_time_minutes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bus_wait_time_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double bus_velocity_kmh = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.bus_velocity_kmh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoutingSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_proto.RoutingSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bus_wait_time_minutes = 1;
  if (this->_internal_bus_wait_time_minutes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_bus_wait_time_minutes(), target);
  }

  // double bus_velocity_kmh = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_velocity_kmh = this->_internal_bus_velocity_kmh();
  uint64_t raw_bus_velocity_kmh;
  memcpy(&raw_bus_velocity_kmh, &tmp_bus_velocity_kmh, sizeof(tmp_bus_velocity_kmh));
  if (raw_bus_velocity_kmh != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_bus_velocity_kmh(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_proto.RoutingSettings)
  return target;
}

size_t RoutingSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_proto.RoutingSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double bus_velocity_kmh = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_velocity_kmh = this->_internal_bus_velocity_kmh();
  uint64_t raw_bus_velocity_kmh;
  memcpy(&raw_bus_velocity_kmh, &tmp_bus_velocity_kmh, sizeof(tmp_bus_velocity_kmh));
  if (raw_bus_velocity_kmh != 0) {
    total_size += 1 + 8;
  }

  // int32 bus_wait_time_minutes = 1;
  if (this->_internal_bus_wait_time_minutes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bus_wait_time_minutes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoutingSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingSettings::GetClassData() const { return &_class_data_; }


void RoutingSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoutingSettings*>(&to_msg);
  auto& from = static_cast<const RoutingSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_proto.RoutingSettings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_velocity_kmh = from._internal_bus_velocity_kmh();
  uint64_t raw_bus_velocity_kmh;
  memcpy(&raw_bus_velocity_kmh, &tmp_bus_velocity_kmh, sizeof(tmp_bus_velocity_kmh));
  if (raw_bus_velocity_kmh != 0) {
    _this->_internal_set_bus_velocity_kmh(from._internal_bus_velocity_kmh());
  }
  if (from._internal_bus_wait_time_minutes() != 0) {
    _this->_internal_set_bus_wait_time_minutes(from._internal_bus_wait_time_minutes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingSettings::CopyFrom(const RoutingSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_proto.RoutingSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingSettings::IsInitialized() const {
  return true;
}

void RoutingSettings::InternalSwap(RoutingSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingSettings, _impl_.bus_wait_time_minutes_)
      + sizeof(RoutingSettings::_impl_.bus_wait_time_minutes_)
      - PROTOBUF_FIELD_OFFSET(RoutingSettings, _impl_.bus_velocity_kmh_)>(
          reinterpret_cast<char*>(&_impl_.bus_velocity_kmh_),
          reinterpret_cast<char*>(&other->_impl_.bus_velocity_kmh_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[0]);
}

// ===================================================================

class StopVertexIds::_Internal {
 public:
};

StopVertexIds::StopVertexIds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_proto.StopVertexIds)
}
StopVertexIds::StopVertexIds(const StopVertexIds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StopVertexIds* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stop_){}
    , decltype(_impl_.in_){}
    , decltype(_impl_.out_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.stop_, &from._impl_.stop_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.out_) -
    reinterpret_cast<char*>(&_impl_.stop_)) + sizeof(_impl_.out_));
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_proto.StopVertexIds)
}

inline void StopVertexIds::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stop_){0u}
    , decltype(_impl_.in_){0u}
    , decltype(_impl_.out_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StopVertexIds::~StopVertexIds() {
  // @@protoc_insertion_point(destructor:transport_catalogue_proto.StopVertexIds)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopVertexIds::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StopVertexIds::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StopVertexIds::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_proto.StopVertexIds)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.stop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.out_) -
      reinterpret_cast<char*>(&_impl_.stop_)) + sizeof(_impl_.out_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopVertexIds::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 stop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 in = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 out = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopVertexIds::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_proto.StopVertexIds)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 stop = 1;
  if (this->_internal_stop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stop(), target);
  }

  // uint32 in = 2;
  if (this->_internal_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_in(), target);
  }

  // uint32 out = 3;
  if (this->_internal_out() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_out(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_proto.StopVertexIds)
  return target;
}

size_t StopVertexIds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_proto.StopVertexIds)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 stop = 1;
  if (this->_internal_stop() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stop());
  }

  // uint32 in = 2;
  if (this->_internal_in() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_in());
  }

  // uint32 out = 3;
  if (this->_internal_out() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_out());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopVertexIds::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StopVertexIds::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopVertexIds::GetClassData() const { return &_class_data_; }


void StopVertexIds::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StopVertexIds*>(&to_msg);
  auto& from = static_cast<const StopVertexIds&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_proto.StopVertexIds)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_stop() != 0) {
    _this->_internal_set_stop(from._internal_stop());
  }
  if (from._internal_in() != 0) {
    _this->_internal_set_in(from._internal_in());
  }
  if (from._internal_out() != 0) {
    _this->_internal_set_out(from._internal_out());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopVertexIds::CopyFrom(const StopVertexIds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_proto.StopVertexIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopVertexIds::IsInitialized() const {
  return true;
}

void StopVertexIds::InternalSwap(StopVertexIds* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopVertexIds, _impl_.out_)
      + sizeof(StopVertexIds::_impl_.out_)
      - PROTOBUF_FIELD_OFFSET(StopVertexIds, _impl_.stop_)>(
          reinterpret_cast<char*>(&_impl_.stop_),
          reinterpret_cast<char*>(&other->_impl_.stop_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StopVertexIds::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[1]);
}

// ===================================================================

class VertexInfo::_Internal {
 public:
};

VertexInfo::VertexInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_proto.VertexInfo)
}
VertexInfo::VertexInfo(const VertexInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VertexInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stop_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.stop_ = from._impl_.stop_;
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_proto.VertexInfo)
}

inline void VertexInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stop_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VertexInfo::~VertexInfo() {
  // @@protoc_insertion_point(destructor:transport_catalogue_proto.VertexInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VertexInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VertexInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VertexInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_proto.VertexInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stop_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VertexInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 stop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VertexInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_proto.VertexInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 stop = 1;
  if (this->_internal_stop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_proto.VertexInfo)
  return target;
}

size_t VertexInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_proto.VertexInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 stop = 1;
  if (this->_internal_stop() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stop());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VertexInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VertexInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VertexInfo::GetClassData() const { return &_class_data_; }


void VertexInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VertexInfo*>(&to_msg);
  auto& from = static_cast<const VertexInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_proto.VertexInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_stop() != 0) {
    _this->_internal_set_stop(from._internal_stop());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VertexInfo::CopyFrom(const VertexInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_proto.VertexInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VertexInfo::IsInitialized() const {
  return true;
}

void VertexInfo::InternalSwap(VertexInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.stop_, other->_impl_.stop_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VertexInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[2]);
}

// ===================================================================

class BusEdgeInfo::_Internal {
 public:
};

BusEdgeInfo::BusEdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_proto.BusEdgeInfo)
}
BusEdgeInfo::BusEdgeInfo(const BusEdgeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BusEdgeInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bus_){}
    , decltype(_impl_.span_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.bus_, &from._impl_.bus_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.span_count_) -
    reinterpret_cast<char*>(&_impl_.bus_)) + sizeof(_impl_.span_count_));
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_proto.BusEdgeInfo)
}

inline void BusEdgeInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bus_){0u}
    , decltype(_impl_.span_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BusEdgeInfo::~BusEdgeInfo() {
  // @@protoc_insertion_point(destructor:transport_catalogue_proto.BusEdgeInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BusEdgeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BusEdgeInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BusEdgeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_proto.BusEdgeInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.bus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.span_count_) -
      reinterpret_cast<char*>(&_impl_.bus_)) + sizeof(_impl_.span_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BusEdgeInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 bus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 span_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.span_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BusEdgeInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_proto.BusEdgeInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 bus = 1;
  if (this->_internal_bus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_bus(), target);
  }

  // uint32 span_count = 2;
  if (this->_internal_span_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_span_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_proto.BusEdgeInfo)
  return target;
}

size_t BusEdgeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_proto.BusEdgeInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 bus = 1;
  if (this->_internal_bus() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bus());
  }

  // uint32 span_count = 2;
  if (this->_internal_span_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_span_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BusEdgeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BusEdgeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BusEdgeInfo::GetClassData() const { return &_class_data_; }


void BusEdgeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BusEdgeInfo*>(&to_msg);
  auto& from = static_cast<const BusEdgeInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_proto.BusEdgeInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bus() != 0) {
    _this->_internal_set_bus(from._internal_bus());
  }
  if (from._internal_span_count() != 0) {
    _this->_internal_set_span_count(from._internal_span_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BusEdgeInfo::CopyFrom(const BusEdgeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_proto.BusEdgeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusEdgeInfo::IsInitialized() const {
  return true;
}

void BusEdgeInfo::InternalSwap(BusEdgeInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BusEdgeInfo, _impl_.span_count_)
      + sizeof(BusEdgeInfo::_impl_.span_count_)
      - PROTOBUF_FIELD_OFFSET(BusEdgeInfo, _impl_.bus_)>(
          reinterpret_cast<char*>(&_impl_.bus_),
          reinterpret_cast<char*>(&other->_impl_.bus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BusEdgeInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[3]);
}

// ===================================================================

class WaitEdgeInfo::_Internal {
 public:
};

WaitEdgeInfo::WaitEdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_proto.WaitEdgeInfo)
}
WaitEdgeInfo::WaitEdgeInfo(const WaitEdgeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  WaitEdgeInfo* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_proto.WaitEdgeInfo)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WaitEdgeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WaitEdgeInfo::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata WaitEdgeInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[4]);
}

// ===================================================================

class EdgeInfo::_Internal {
 public:
  static const ::transport_catalogue_proto::BusEdgeInfo& bus_data(const EdgeInfo* msg);
  static const ::transport_catalogue_proto::WaitEdgeInfo& wait_data(const EdgeInfo* msg);
};

const ::transport_catalogue_proto::BusEdgeInfo&
EdgeInfo::_Internal::bus_data(const EdgeInfo* msg) {
  return *msg->_impl_.data_.bus_data_;
}
const ::transport_catalogue_proto::WaitEdgeInfo&
EdgeInfo::_Internal::wait_data(const EdgeInfo* msg) {
  return *msg->_impl_.data_.wait_data_;
}
void EdgeInfo::set_allocated_bus_data(::transport_catalogue_proto::BusEdgeInfo* bus_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (bus_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bus_data);
    if (message_arena != submessage_arena) {
      bus_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bus_data, submessage_arena);
    }
    set_has_bus_data();
    _impl_.data_.bus_data_ = bus_data;
  }
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_proto.EdgeInfo.bus_data)
}
void EdgeInfo::set_allocated_wait_data(::transport_catalogue_proto::WaitEdgeInfo* wait_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (wait_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(wait_data);
    if (message_arena != submessage_arena) {
      wait_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wait_data, submessage_arena);
    }
    set_has_wait_data();
    _impl_.data_.wait_data_ = wait_data;
  }
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_proto.EdgeInfo.wait_data)
}
EdgeInfo::EdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_proto.EdgeInfo)
}
EdgeInfo::EdgeInfo(const EdgeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EdgeInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kBusData: {
      _this->_internal_mutable_bus_data()->::transport_catalogue_proto::BusEdgeInfo::MergeFrom(
          from._internal_bus_data());
      break;
    }
    case kWaitData: {
      _this->_internal_mutable_wait_data()->::transport_catalogue_proto::WaitEdgeInfo::MergeFrom(
          from._internal_wait_data());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_proto.EdgeInfo)
}

inline void EdgeInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_data();
}

EdgeInfo::~EdgeInfo() {
  // @@protoc_insertion_point(destructor:transport_catalogue_proto.EdgeInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EdgeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void EdgeInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EdgeInfo::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:transport_catalogue_proto.EdgeInfo)
  switch (data_case()) {
    case kBusData: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.bus_data_;
      }
      break;
    }
    case kWaitData: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.wait_data_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void EdgeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_proto.EdgeInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdgeInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .transport_catalogue_proto.BusEdgeInfo bus_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bus_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .transport_catalogue_proto.WaitEdgeInfo wait_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_wait_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EdgeInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_proto.EdgeInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .transport_catalogue_proto.BusEdgeInfo bus_data = 1;
  if (_internal_has_bus_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::bus_data(this),
        _Internal::bus_data(this).GetCachedSize(), target, stream);
  }

  // .transport_catalogue_proto.WaitEdgeInfo wait_data = 2;
  if (_internal_has_wait_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::wait_data(this),
        _Internal::wait_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_proto.EdgeInfo)
  return target;
}

size_t EdgeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_proto.EdgeInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // .transport_catalogue_proto.BusEdgeInfo bus_data = 1;
    case kBusData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.bus_data_);
      break;
    }
    // .transport_catalogue_proto.WaitEdgeInfo wait_data = 2;
    case kWaitData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.wait_data_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EdgeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EdgeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EdgeInfo::GetClassData() const { return &_class_data_; }


void EdgeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EdgeInfo*>(&to_msg);
  auto& from = static_cast<const EdgeInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_proto.EdgeInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kBusData: {
      _this->_internal_mutable_bus_data()->::transport_catalogue_proto::BusEdgeInfo::MergeFrom(
          from._internal_bus_data());
      break;
    }
    case kWaitData: {
      _this->_internal_mutable_wait_data()->::transport_catalogue_proto::WaitEdgeInfo::MergeFrom(
          from._internal_wait_data());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EdgeInfo::CopyFrom(const EdgeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_proto.EdgeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeInfo::IsInitialized() const {
  return true;
}

void EdgeInfo::InternalSwap(EdgeInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EdgeInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[5]);
}

// ===================================================================

class TransportRouter::_Internal {
 public:
  static const ::transport_catalogue_proto::RoutingSettings& routing_settings(const TransportRouter* msg);
  static const ::graph_proto::DirectedWeightedGraph& graph(const TransportRouter* msg);
  static const ::graph_proto::Router& router(const TransportRouter* msg);
};

const ::transport_catalogue_proto::RoutingSettings&
TransportRouter::_Internal::routing_settings(const TransportRouter* msg) {
  return *msg->_impl_.routing_settings_;
}
const ::graph_proto::DirectedWeightedGraph&
TransportRouter::_Internal::graph(const TransportRouter* msg) {
  return *msg->_impl_.graph_;
}
const ::graph_proto::Router&
TransportRouter::_Internal::router(const TransportRouter* msg) {
  return *msg->_impl_.router_;
}
void TransportRouter::clear_graph() {
  if (GetArenaForAllocation() == nullptr && _impl_.graph_ != nullptr) {
    delete _impl_.graph_;
  }
  _impl_.graph_ = nullptr;
}
void TransportRouter::clear_router() {
  if (GetArenaForAllocation() == nullptr && _impl_.router_ != nullptr) {
    delete _impl_.router_;
  }
  _impl_.router_ = nullptr;
}
TransportRouter::TransportRouter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_proto.TransportRouter)
}
TransportRouter::TransportRouter(const TransportRouter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransportRouter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stops_vertex_ids_){from._impl_.stops_vertex_ids_}
    , decltype(_impl_.vertices_info_){from._impl_.vertices_info_}
    , decltype(_impl_.edges_info_){from._impl_.edges_info_}
    , decltype(_impl_.routing_settings_){nullptr}
    , decltype(_impl_.graph_){nullptr}
    , decltype(_impl_.router_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_routing_settings()) {
    _this->_impl_.routing_settings_ = new ::transport_catalogue_proto::RoutingSettings(*from._impl_.routing_settings_);
  }
  if (from._internal_has_graph()) {
    _this->_impl_.graph_ = new ::graph_proto::DirectedWeightedGraph(*from._impl_.graph_);
  }
  if (from._internal_has_router()) {
    _this->_impl_.router_ = new ::graph_proto::Router(*from._impl_.router_);
  }
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_proto.TransportRouter)
}

inline void TransportRouter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stops_vertex_ids_){arena}
    , decltype(_impl_.vertices_info_){arena}
    , decltype(_impl_.edges_info_){arena}
    , decltype(_impl_.routing_settings_){nullptr}
    , decltype(_impl_.graph_){nullptr}
    , decltype(_impl_.router_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TransportRouter::~TransportRouter() {
  // @@protoc_insertion_point(destructor:transport_catalogue_proto.TransportRouter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransportRouter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stops_vertex_ids_.~RepeatedPtrField();
  _impl_.vertices_info_.~RepeatedPtrField();
  _impl_.edges_info_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.routing_settings_;
  if (this != internal_default_instance()) delete _impl_.graph_;
  if (this != internal_default_instance()) delete _impl_.router_;
}

void TransportRouter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransportRouter::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_proto.TransportRouter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stops_vertex_ids_.Clear();
  _impl_.vertices_info_.Clear();
  _impl_.edges_info_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.routing_settings_ != nullptr) {
    delete _impl_.routing_settings_;
  }
  _impl_.routing_settings_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.graph_ != nullptr) {
    delete _impl_.graph_;
  }
  _impl_.graph_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.router_ != nullptr) {
    delete _impl_.router_;
  }
  _impl_.router_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransportRouter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .transport_catalogue_proto.RoutingSettings routing_settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .graph_proto.DirectedWeightedGraph graph = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .graph_proto.Router router = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_router(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .transport_catalogue_proto.StopVertexIds stops_vertex_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stops_vertex_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .transport_catalogue_proto.VertexInfo vertices_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .transport_catalogue_proto.EdgeInfo edges_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edges_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransportRouter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_proto.TransportRouter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .transport_catalogue_proto.RoutingSettings routing_settings = 1;
  if (this->_internal_has_routing_settings()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::routing_settings(this),
        _Internal::routing_settings(this).GetCachedSize(), target, stream);
  }

  // .graph_proto.DirectedWeightedGraph graph = 2;
  if (this->_internal_has_graph()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::graph(this),
        _Internal::graph(this).GetCachedSize(), target, stream);
  }

  // .graph_proto.Router router = 3;
  if (this->_internal_has_router()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::router(this),
        _Internal::router(this).GetCachedSize(), target, stream);
  }

  // repeated .transport_catalogue_proto.StopVertexIds stops_vertex_ids = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stops_vertex_ids_size()); i < n; i++) {
    const auto& repfield = this->_internal_stops_vertex_ids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .transport_catalogue_proto.VertexInfo vertices_info = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vertices_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_vertices_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .transport_catalogue_proto.EdgeInfo edges_info = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_edges_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_edges_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_proto.TransportRouter)
  return target;
}

size_t TransportRouter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_proto.TransportRouter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .transport_catalogue_proto.StopVertexIds stops_vertex_ids = 4;
  total_size += 1UL * this->_internal_stops_vertex_ids_size();
  for (const auto& msg : this->_impl_.stops_vertex_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .transport_catalogue_proto.VertexInfo vertices_info = 5;
  total_size += 1UL * this->_internal_vertices_info_size();
  for (const auto& msg : this->_impl_.vertices_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .transport_catalogue_proto.EdgeInfo edges_info = 6;
  total_size += 1UL * this->_internal_edges_info_size();
  for (const auto& msg : this->_impl_.edges_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .transport_catalogue_proto.RoutingSettings routing_settings = 1;
  if (this->_internal_has_routing_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.routing_settings_);
  }

  // .graph_proto.DirectedWeightedGraph graph = 2;
  if (this->_internal_has_graph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.graph_);
  }

  // .graph_proto.Router router = 3;
  if (this->_internal_has_router()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.router_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransportRouter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransportRouter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransportRouter::GetClassData() const { return &_class_data_; }


void TransportRouter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransportRouter*>(&to_msg);
  auto& from = static_cast<const TransportRouter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_proto.TransportRouter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stops_vertex_ids_.MergeFrom(from._impl_.stops_vertex_ids_);
  _this->_impl_.vertices_info_.MergeFrom(from._impl_.vertices_info_);
  _this->_impl_.edges_info_.MergeFrom(from._impl_.edges_info_);
  if (from._internal_has_routing_settings()) {
    _this->_internal_mutable_routing_settings()->::transport_catalogue_proto::RoutingSettings::MergeFrom(
        from._internal_routing_settings());
  }
  if (from._internal_has_graph()) {
    _this->_internal_mutable_graph()->::graph_proto::DirectedWeightedGraph::MergeFrom(
        from._internal_graph());
  }
  if (from._internal_has_router()) {
    _this->_internal_mutable_router()->::graph_proto::Router::MergeFrom(
        from._internal_router());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransportRouter::CopyFrom(const TransportRouter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_proto.TransportRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportRouter::IsInitialized() const {
  return true;
}

void TransportRouter::InternalSwap(TransportRouter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stops_vertex_ids_.InternalSwap(&other->_impl_.stops_vertex_ids_);
  _impl_.vertices_info_.InternalSwap(&other->_impl_.vertices_info_);
  _impl_.edges_info_.InternalSwap(&other->_impl_.edges_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransportRouter, _impl_.router_)
      + sizeof(TransportRouter::_impl_.router_)
      - PROTOBUF_FIELD_OFFSET(TransportRouter, _impl_.routing_settings_)>(
          reinterpret_cast<char*>(&_impl_.routing_settings_),
          reinterpret_cast<char*>(&other->_impl_.routing_settings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransportRouter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace transport_catalogue_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::transport_catalogue_proto::RoutingSettings*
Arena::CreateMaybeMessage< ::transport_catalogue_proto::RoutingSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_proto::RoutingSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_proto::StopVertexIds*
Arena::CreateMaybeMessage< ::transport_catalogue_proto::StopVertexIds >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_proto::StopVertexIds >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_proto::VertexInfo*
Arena::CreateMaybeMessage< ::transport_catalogue_proto::VertexInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_proto::VertexInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_proto::BusEdgeInfo*
Arena::CreateMaybeMessage< ::transport_catalogue_proto::BusEdgeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_proto::BusEdgeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_proto::WaitEdgeInfo*
Arena::CreateMaybeMessage< ::transport_catalogue_proto::WaitEdgeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_proto::WaitEdgeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_proto::EdgeInfo*
Arena::CreateMaybeMessage< ::transport_catalogue_proto::EdgeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_proto::EdgeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_proto::TransportRouter*
Arena::CreateMaybeMessage< ::transport_catalogue_proto::TransportRouter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_proto::TransportRouter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
