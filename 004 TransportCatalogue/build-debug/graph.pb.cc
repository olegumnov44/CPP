// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#include "graph.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace graph_proto {
PROTOBUF_CONSTEXPR Edge::Edge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.from_)*/0u
  , /*decltype(_impl_.to_)*/0u
  , /*decltype(_impl_.weight_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EdgeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdgeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdgeDefaultTypeInternal() {}
  union {
    Edge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdgeDefaultTypeInternal _Edge_default_instance_;
PROTOBUF_CONSTEXPR DirectedWeightedGraph::DirectedWeightedGraph(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.edges_)*/{}
  , /*decltype(_impl_.vertex_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DirectedWeightedGraphDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DirectedWeightedGraphDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DirectedWeightedGraphDefaultTypeInternal() {}
  union {
    DirectedWeightedGraph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DirectedWeightedGraphDefaultTypeInternal _DirectedWeightedGraph_default_instance_;
PROTOBUF_CONSTEXPR RouteInternalData::RouteInternalData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.weight_)*/0
  , /*decltype(_impl_.exists_)*/false
  , /*decltype(_impl_.has_prev_edge_)*/false
  , /*decltype(_impl_.prev_edge_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouteInternalDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteInternalDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteInternalDataDefaultTypeInternal() {}
  union {
    RouteInternalData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteInternalDataDefaultTypeInternal _RouteInternalData_default_instance_;
PROTOBUF_CONSTEXPR RoutesInternalDataByTarget::RoutesInternalDataByTarget(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.targets_data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoutesInternalDataByTargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutesInternalDataByTargetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutesInternalDataByTargetDefaultTypeInternal() {}
  union {
    RoutesInternalDataByTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutesInternalDataByTargetDefaultTypeInternal _RoutesInternalDataByTarget_default_instance_;
PROTOBUF_CONSTEXPR Router::Router(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sources_data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouterDefaultTypeInternal() {}
  union {
    Router _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouterDefaultTypeInternal _Router_default_instance_;
}  // namespace graph_proto
static ::_pb::Metadata file_level_metadata_graph_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_graph_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_graph_2eproto = nullptr;

const uint32_t TableStruct_graph_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::graph_proto::Edge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::graph_proto::Edge, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::graph_proto::Edge, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::graph_proto::Edge, _impl_.weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::graph_proto::DirectedWeightedGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::graph_proto::DirectedWeightedGraph, _impl_.vertex_count_),
  PROTOBUF_FIELD_OFFSET(::graph_proto::DirectedWeightedGraph, _impl_.edges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::graph_proto::RouteInternalData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::graph_proto::RouteInternalData, _impl_.exists_),
  PROTOBUF_FIELD_OFFSET(::graph_proto::RouteInternalData, _impl_.weight_),
  PROTOBUF_FIELD_OFFSET(::graph_proto::RouteInternalData, _impl_.has_prev_edge_),
  PROTOBUF_FIELD_OFFSET(::graph_proto::RouteInternalData, _impl_.prev_edge_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::graph_proto::RoutesInternalDataByTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::graph_proto::RoutesInternalDataByTarget, _impl_.targets_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::graph_proto::Router, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::graph_proto::Router, _impl_.sources_data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::graph_proto::Edge)},
  { 9, -1, -1, sizeof(::graph_proto::DirectedWeightedGraph)},
  { 17, -1, -1, sizeof(::graph_proto::RouteInternalData)},
  { 27, -1, -1, sizeof(::graph_proto::RoutesInternalDataByTarget)},
  { 34, -1, -1, sizeof(::graph_proto::Router)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::graph_proto::_Edge_default_instance_._instance,
  &::graph_proto::_DirectedWeightedGraph_default_instance_._instance,
  &::graph_proto::_RouteInternalData_default_instance_._instance,
  &::graph_proto::_RoutesInternalDataByTarget_default_instance_._instance,
  &::graph_proto::_Router_default_instance_._instance,
};

const char descriptor_table_protodef_graph_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013graph.proto\022\013graph_proto\"0\n\004Edge\022\014\n\004fr"
  "om\030\001 \001(\r\022\n\n\002to\030\002 \001(\r\022\016\n\006weight\030\003 \001(\001\"O\n\025"
  "DirectedWeightedGraph\022\024\n\014vertex_count\030\001 "
  "\001(\r\022 \n\005edges\030\002 \003(\0132\021.graph_proto.Edge\"]\n"
  "\021RouteInternalData\022\016\n\006exists\030\001 \001(\010\022\016\n\006we"
  "ight\030\002 \001(\001\022\025\n\rhas_prev_edge\030\003 \001(\010\022\021\n\tpre"
  "v_edge\030\004 \001(\r\"R\n\032RoutesInternalDataByTarg"
  "et\0224\n\014targets_data\030\001 \003(\0132\036.graph_proto.R"
  "outeInternalData\"G\n\006Router\022=\n\014sources_da"
  "ta\030\001 \003(\0132\'.graph_proto.RoutesInternalDat"
  "aByTargetb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_graph_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_graph_2eproto = {
    false, false, 417, descriptor_table_protodef_graph_2eproto,
    "graph.proto",
    &descriptor_table_graph_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_graph_2eproto::offsets,
    file_level_metadata_graph_2eproto, file_level_enum_descriptors_graph_2eproto,
    file_level_service_descriptors_graph_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_graph_2eproto_getter() {
  return &descriptor_table_graph_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_graph_2eproto(&descriptor_table_graph_2eproto);
namespace graph_proto {

// ===================================================================

class Edge::_Internal {
 public:
};

Edge::Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:graph_proto.Edge)
}
Edge::Edge(const Edge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Edge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.from_){}
    , decltype(_impl_.to_){}
    , decltype(_impl_.weight_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.from_, &from._impl_.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.weight_) -
    reinterpret_cast<char*>(&_impl_.from_)) + sizeof(_impl_.weight_));
  // @@protoc_insertion_point(copy_constructor:graph_proto.Edge)
}

inline void Edge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.from_){0u}
    , decltype(_impl_.to_){0u}
    , decltype(_impl_.weight_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Edge::~Edge() {
  // @@protoc_insertion_point(destructor:graph_proto.Edge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Edge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Edge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Edge::Clear() {
// @@protoc_insertion_point(message_clear_start:graph_proto.Edge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.weight_) -
      reinterpret_cast<char*>(&_impl_.from_)) + sizeof(_impl_.weight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Edge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Edge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:graph_proto.Edge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->_internal_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from(), target);
  }

  // uint32 to = 2;
  if (this->_internal_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to(), target);
  }

  // double weight = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:graph_proto.Edge)
  return target;
}

size_t Edge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:graph_proto.Edge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->_internal_from() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_from());
  }

  // uint32 to = 2;
  if (this->_internal_to() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_to());
  }

  // double weight = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Edge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Edge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Edge::GetClassData() const { return &_class_data_; }


void Edge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Edge*>(&to_msg);
  auto& from = static_cast<const Edge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:graph_proto.Edge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_from() != 0) {
    _this->_internal_set_from(from._internal_from());
  }
  if (from._internal_to() != 0) {
    _this->_internal_set_to(from._internal_to());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = from._internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    _this->_internal_set_weight(from._internal_weight());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Edge::CopyFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:graph_proto.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge::IsInitialized() const {
  return true;
}

void Edge::InternalSwap(Edge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Edge, _impl_.weight_)
      + sizeof(Edge::_impl_.weight_)
      - PROTOBUF_FIELD_OFFSET(Edge, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Edge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[0]);
}

// ===================================================================

class DirectedWeightedGraph::_Internal {
 public:
};

DirectedWeightedGraph::DirectedWeightedGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:graph_proto.DirectedWeightedGraph)
}
DirectedWeightedGraph::DirectedWeightedGraph(const DirectedWeightedGraph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DirectedWeightedGraph* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.edges_){from._impl_.edges_}
    , decltype(_impl_.vertex_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.vertex_count_ = from._impl_.vertex_count_;
  // @@protoc_insertion_point(copy_constructor:graph_proto.DirectedWeightedGraph)
}

inline void DirectedWeightedGraph::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.edges_){arena}
    , decltype(_impl_.vertex_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DirectedWeightedGraph::~DirectedWeightedGraph() {
  // @@protoc_insertion_point(destructor:graph_proto.DirectedWeightedGraph)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DirectedWeightedGraph::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.edges_.~RepeatedPtrField();
}

void DirectedWeightedGraph::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DirectedWeightedGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:graph_proto.DirectedWeightedGraph)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.edges_.Clear();
  _impl_.vertex_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirectedWeightedGraph::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vertex_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vertex_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .graph_proto.Edge edges = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DirectedWeightedGraph::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:graph_proto.DirectedWeightedGraph)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vertex_count = 1;
  if (this->_internal_vertex_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vertex_count(), target);
  }

  // repeated .graph_proto.Edge edges = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_edges_size()); i < n; i++) {
    const auto& repfield = this->_internal_edges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:graph_proto.DirectedWeightedGraph)
  return target;
}

size_t DirectedWeightedGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:graph_proto.DirectedWeightedGraph)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .graph_proto.Edge edges = 2;
  total_size += 1UL * this->_internal_edges_size();
  for (const auto& msg : this->_impl_.edges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 vertex_count = 1;
  if (this->_internal_vertex_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vertex_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DirectedWeightedGraph::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DirectedWeightedGraph::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DirectedWeightedGraph::GetClassData() const { return &_class_data_; }


void DirectedWeightedGraph::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DirectedWeightedGraph*>(&to_msg);
  auto& from = static_cast<const DirectedWeightedGraph&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:graph_proto.DirectedWeightedGraph)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.edges_.MergeFrom(from._impl_.edges_);
  if (from._internal_vertex_count() != 0) {
    _this->_internal_set_vertex_count(from._internal_vertex_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DirectedWeightedGraph::CopyFrom(const DirectedWeightedGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:graph_proto.DirectedWeightedGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectedWeightedGraph::IsInitialized() const {
  return true;
}

void DirectedWeightedGraph::InternalSwap(DirectedWeightedGraph* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.edges_.InternalSwap(&other->_impl_.edges_);
  swap(_impl_.vertex_count_, other->_impl_.vertex_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectedWeightedGraph::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[1]);
}

// ===================================================================

class RouteInternalData::_Internal {
 public:
};

RouteInternalData::RouteInternalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:graph_proto.RouteInternalData)
}
RouteInternalData::RouteInternalData(const RouteInternalData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RouteInternalData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.weight_){}
    , decltype(_impl_.exists_){}
    , decltype(_impl_.has_prev_edge_){}
    , decltype(_impl_.prev_edge_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.weight_, &from._impl_.weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.prev_edge_) -
    reinterpret_cast<char*>(&_impl_.weight_)) + sizeof(_impl_.prev_edge_));
  // @@protoc_insertion_point(copy_constructor:graph_proto.RouteInternalData)
}

inline void RouteInternalData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.weight_){0}
    , decltype(_impl_.exists_){false}
    , decltype(_impl_.has_prev_edge_){false}
    , decltype(_impl_.prev_edge_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RouteInternalData::~RouteInternalData() {
  // @@protoc_insertion_point(destructor:graph_proto.RouteInternalData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouteInternalData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RouteInternalData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RouteInternalData::Clear() {
// @@protoc_insertion_point(message_clear_start:graph_proto.RouteInternalData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.prev_edge_) -
      reinterpret_cast<char*>(&_impl_.weight_)) + sizeof(_impl_.prev_edge_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteInternalData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool exists = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.exists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool has_prev_edge = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.has_prev_edge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 prev_edge = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.prev_edge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouteInternalData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:graph_proto.RouteInternalData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool exists = 1;
  if (this->_internal_exists() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_exists(), target);
  }

  // double weight = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_weight(), target);
  }

  // bool has_prev_edge = 3;
  if (this->_internal_has_prev_edge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_has_prev_edge(), target);
  }

  // uint32 prev_edge = 4;
  if (this->_internal_prev_edge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_prev_edge(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:graph_proto.RouteInternalData)
  return target;
}

size_t RouteInternalData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:graph_proto.RouteInternalData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double weight = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    total_size += 1 + 8;
  }

  // bool exists = 1;
  if (this->_internal_exists() != 0) {
    total_size += 1 + 1;
  }

  // bool has_prev_edge = 3;
  if (this->_internal_has_prev_edge() != 0) {
    total_size += 1 + 1;
  }

  // uint32 prev_edge = 4;
  if (this->_internal_prev_edge() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_prev_edge());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteInternalData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RouteInternalData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteInternalData::GetClassData() const { return &_class_data_; }


void RouteInternalData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RouteInternalData*>(&to_msg);
  auto& from = static_cast<const RouteInternalData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:graph_proto.RouteInternalData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = from._internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    _this->_internal_set_weight(from._internal_weight());
  }
  if (from._internal_exists() != 0) {
    _this->_internal_set_exists(from._internal_exists());
  }
  if (from._internal_has_prev_edge() != 0) {
    _this->_internal_set_has_prev_edge(from._internal_has_prev_edge());
  }
  if (from._internal_prev_edge() != 0) {
    _this->_internal_set_prev_edge(from._internal_prev_edge());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteInternalData::CopyFrom(const RouteInternalData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:graph_proto.RouteInternalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteInternalData::IsInitialized() const {
  return true;
}

void RouteInternalData::InternalSwap(RouteInternalData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteInternalData, _impl_.prev_edge_)
      + sizeof(RouteInternalData::_impl_.prev_edge_)
      - PROTOBUF_FIELD_OFFSET(RouteInternalData, _impl_.weight_)>(
          reinterpret_cast<char*>(&_impl_.weight_),
          reinterpret_cast<char*>(&other->_impl_.weight_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteInternalData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[2]);
}

// ===================================================================

class RoutesInternalDataByTarget::_Internal {
 public:
};

RoutesInternalDataByTarget::RoutesInternalDataByTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:graph_proto.RoutesInternalDataByTarget)
}
RoutesInternalDataByTarget::RoutesInternalDataByTarget(const RoutesInternalDataByTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoutesInternalDataByTarget* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.targets_data_){from._impl_.targets_data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:graph_proto.RoutesInternalDataByTarget)
}

inline void RoutesInternalDataByTarget::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.targets_data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoutesInternalDataByTarget::~RoutesInternalDataByTarget() {
  // @@protoc_insertion_point(destructor:graph_proto.RoutesInternalDataByTarget)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoutesInternalDataByTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.targets_data_.~RepeatedPtrField();
}

void RoutesInternalDataByTarget::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoutesInternalDataByTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:graph_proto.RoutesInternalDataByTarget)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.targets_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutesInternalDataByTarget::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .graph_proto.RouteInternalData targets_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_targets_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoutesInternalDataByTarget::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:graph_proto.RoutesInternalDataByTarget)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .graph_proto.RouteInternalData targets_data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_targets_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_targets_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:graph_proto.RoutesInternalDataByTarget)
  return target;
}

size_t RoutesInternalDataByTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:graph_proto.RoutesInternalDataByTarget)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .graph_proto.RouteInternalData targets_data = 1;
  total_size += 1UL * this->_internal_targets_data_size();
  for (const auto& msg : this->_impl_.targets_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutesInternalDataByTarget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoutesInternalDataByTarget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutesInternalDataByTarget::GetClassData() const { return &_class_data_; }


void RoutesInternalDataByTarget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoutesInternalDataByTarget*>(&to_msg);
  auto& from = static_cast<const RoutesInternalDataByTarget&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:graph_proto.RoutesInternalDataByTarget)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.targets_data_.MergeFrom(from._impl_.targets_data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutesInternalDataByTarget::CopyFrom(const RoutesInternalDataByTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:graph_proto.RoutesInternalDataByTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutesInternalDataByTarget::IsInitialized() const {
  return true;
}

void RoutesInternalDataByTarget::InternalSwap(RoutesInternalDataByTarget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.targets_data_.InternalSwap(&other->_impl_.targets_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutesInternalDataByTarget::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[3]);
}

// ===================================================================

class Router::_Internal {
 public:
};

Router::Router(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:graph_proto.Router)
}
Router::Router(const Router& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Router* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sources_data_){from._impl_.sources_data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:graph_proto.Router)
}

inline void Router::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sources_data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Router::~Router() {
  // @@protoc_insertion_point(destructor:graph_proto.Router)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Router::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sources_data_.~RepeatedPtrField();
}

void Router::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Router::Clear() {
// @@protoc_insertion_point(message_clear_start:graph_proto.Router)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sources_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Router::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .graph_proto.RoutesInternalDataByTarget sources_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sources_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Router::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:graph_proto.Router)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .graph_proto.RoutesInternalDataByTarget sources_data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sources_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_sources_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:graph_proto.Router)
  return target;
}

size_t Router::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:graph_proto.Router)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .graph_proto.RoutesInternalDataByTarget sources_data = 1;
  total_size += 1UL * this->_internal_sources_data_size();
  for (const auto& msg : this->_impl_.sources_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Router::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Router::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Router::GetClassData() const { return &_class_data_; }


void Router::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Router*>(&to_msg);
  auto& from = static_cast<const Router&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:graph_proto.Router)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sources_data_.MergeFrom(from._impl_.sources_data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Router::CopyFrom(const Router& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:graph_proto.Router)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Router::IsInitialized() const {
  return true;
}

void Router::InternalSwap(Router* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sources_data_.InternalSwap(&other->_impl_.sources_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Router::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace graph_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::graph_proto::Edge*
Arena::CreateMaybeMessage< ::graph_proto::Edge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::graph_proto::Edge >(arena);
}
template<> PROTOBUF_NOINLINE ::graph_proto::DirectedWeightedGraph*
Arena::CreateMaybeMessage< ::graph_proto::DirectedWeightedGraph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::graph_proto::DirectedWeightedGraph >(arena);
}
template<> PROTOBUF_NOINLINE ::graph_proto::RouteInternalData*
Arena::CreateMaybeMessage< ::graph_proto::RouteInternalData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::graph_proto::RouteInternalData >(arena);
}
template<> PROTOBUF_NOINLINE ::graph_proto::RoutesInternalDataByTarget*
Arena::CreateMaybeMessage< ::graph_proto::RoutesInternalDataByTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::graph_proto::RoutesInternalDataByTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::graph_proto::Router*
Arena::CreateMaybeMessage< ::graph_proto::Router >(Arena* arena) {
  return Arena::CreateMessageInternal< ::graph_proto::Router >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
