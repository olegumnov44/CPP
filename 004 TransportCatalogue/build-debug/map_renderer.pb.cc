// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_renderer.proto

#include "map_renderer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace transport_catalogue_proto {
PROTOBUF_CONSTEXPR RenderSettings::RenderSettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.palette_)*/{}
  , /*decltype(_impl_.underlayer_color_)*/nullptr
  , /*decltype(_impl_.bus_label_offset_)*/nullptr
  , /*decltype(_impl_.stop_label_offset_)*/nullptr
  , /*decltype(_impl_.max_width_)*/0
  , /*decltype(_impl_.max_height_)*/0
  , /*decltype(_impl_.padding_)*/0
  , /*decltype(_impl_.line_width_)*/0
  , /*decltype(_impl_.underlayer_width_)*/0
  , /*decltype(_impl_.stop_radius_)*/0
  , /*decltype(_impl_.bus_label_font_size_)*/0
  , /*decltype(_impl_.stop_label_font_size_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RenderSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RenderSettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RenderSettingsDefaultTypeInternal() {}
  union {
    RenderSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RenderSettingsDefaultTypeInternal _RenderSettings_default_instance_;
PROTOBUF_CONSTEXPR StopCoords::StopCoords(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.point_)*/nullptr
  , /*decltype(_impl_.stop_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StopCoordsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopCoordsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopCoordsDefaultTypeInternal() {}
  union {
    StopCoords _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopCoordsDefaultTypeInternal _StopCoords_default_instance_;
PROTOBUF_CONSTEXPR MapRenderer::MapRenderer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stops_coords_)*/{}
  , /*decltype(_impl_.render_settings_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapRendererDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapRendererDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapRendererDefaultTypeInternal() {}
  union {
    MapRenderer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapRendererDefaultTypeInternal _MapRenderer_default_instance_;
}  // namespace transport_catalogue_proto
static ::_pb::Metadata file_level_metadata_map_5frenderer_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_map_5frenderer_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_map_5frenderer_2eproto = nullptr;

const uint32_t TableStruct_map_5frenderer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::RenderSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::RenderSettings, _impl_.max_width_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::RenderSettings, _impl_.max_height_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::RenderSettings, _impl_.padding_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::RenderSettings, _impl_.palette_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::RenderSettings, _impl_.line_width_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::RenderSettings, _impl_.underlayer_color_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::RenderSettings, _impl_.underlayer_width_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::RenderSettings, _impl_.stop_radius_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::RenderSettings, _impl_.bus_label_offset_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::RenderSettings, _impl_.bus_label_font_size_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::RenderSettings, _impl_.stop_label_offset_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::RenderSettings, _impl_.stop_label_font_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::StopCoords, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::StopCoords, _impl_.stop_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::StopCoords, _impl_.point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::MapRenderer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::MapRenderer, _impl_.render_settings_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_proto::MapRenderer, _impl_.stops_coords_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::transport_catalogue_proto::RenderSettings)},
  { 18, -1, -1, sizeof(::transport_catalogue_proto::StopCoords)},
  { 26, -1, -1, sizeof(::transport_catalogue_proto::MapRenderer)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::transport_catalogue_proto::_RenderSettings_default_instance_._instance,
  &::transport_catalogue_proto::_StopCoords_default_instance_._instance,
  &::transport_catalogue_proto::_MapRenderer_default_instance_._instance,
};

const char descriptor_table_protodef_map_5frenderer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022map_renderer.proto\022\031transport_catalogu"
  "e_proto\032\tsvg.proto\"\356\002\n\016RenderSettings\022\021\n"
  "\tmax_width\030\001 \001(\001\022\022\n\nmax_height\030\002 \001(\001\022\017\n\007"
  "padding\030\003 \001(\001\022!\n\007palette\030\004 \003(\0132\020.svg_pro"
  "to.Color\022\022\n\nline_width\030\005 \001(\001\022*\n\020underlay"
  "er_color\030\006 \001(\0132\020.svg_proto.Color\022\030\n\020unde"
  "rlayer_width\030\007 \001(\001\022\023\n\013stop_radius\030\010 \001(\001\022"
  "*\n\020bus_label_offset\030\t \001(\0132\020.svg_proto.Po"
  "int\022\033\n\023bus_label_font_size\030\n \001(\005\022+\n\021stop"
  "_label_offset\030\013 \001(\0132\020.svg_proto.Point\022\034\n"
  "\024stop_label_font_size\030\014 \001(\005\";\n\nStopCoord"
  "s\022\014\n\004stop\030\001 \001(\r\022\037\n\005point\030\002 \001(\0132\020.svg_pro"
  "to.Point\"\216\001\n\013MapRenderer\022B\n\017render_setti"
  "ngs\030\001 \001(\0132).transport_catalogue_proto.Re"
  "nderSettings\022;\n\014stops_coords\030\002 \003(\0132%.tra"
  "nsport_catalogue_proto.StopCoordsb\006proto"
  "3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_map_5frenderer_2eproto_deps[1] = {
  &::descriptor_table_svg_2eproto,
};
static ::_pbi::once_flag descriptor_table_map_5frenderer_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_map_5frenderer_2eproto = {
    false, false, 641, descriptor_table_protodef_map_5frenderer_2eproto,
    "map_renderer.proto",
    &descriptor_table_map_5frenderer_2eproto_once, descriptor_table_map_5frenderer_2eproto_deps, 1, 3,
    schemas, file_default_instances, TableStruct_map_5frenderer_2eproto::offsets,
    file_level_metadata_map_5frenderer_2eproto, file_level_enum_descriptors_map_5frenderer_2eproto,
    file_level_service_descriptors_map_5frenderer_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_map_5frenderer_2eproto_getter() {
  return &descriptor_table_map_5frenderer_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_map_5frenderer_2eproto(&descriptor_table_map_5frenderer_2eproto);
namespace transport_catalogue_proto {

// ===================================================================

class RenderSettings::_Internal {
 public:
  static const ::svg_proto::Color& underlayer_color(const RenderSettings* msg);
  static const ::svg_proto::Point& bus_label_offset(const RenderSettings* msg);
  static const ::svg_proto::Point& stop_label_offset(const RenderSettings* msg);
};

const ::svg_proto::Color&
RenderSettings::_Internal::underlayer_color(const RenderSettings* msg) {
  return *msg->_impl_.underlayer_color_;
}
const ::svg_proto::Point&
RenderSettings::_Internal::bus_label_offset(const RenderSettings* msg) {
  return *msg->_impl_.bus_label_offset_;
}
const ::svg_proto::Point&
RenderSettings::_Internal::stop_label_offset(const RenderSettings* msg) {
  return *msg->_impl_.stop_label_offset_;
}
void RenderSettings::clear_palette() {
  _impl_.palette_.Clear();
}
void RenderSettings::clear_underlayer_color() {
  if (GetArenaForAllocation() == nullptr && _impl_.underlayer_color_ != nullptr) {
    delete _impl_.underlayer_color_;
  }
  _impl_.underlayer_color_ = nullptr;
}
void RenderSettings::clear_bus_label_offset() {
  if (GetArenaForAllocation() == nullptr && _impl_.bus_label_offset_ != nullptr) {
    delete _impl_.bus_label_offset_;
  }
  _impl_.bus_label_offset_ = nullptr;
}
void RenderSettings::clear_stop_label_offset() {
  if (GetArenaForAllocation() == nullptr && _impl_.stop_label_offset_ != nullptr) {
    delete _impl_.stop_label_offset_;
  }
  _impl_.stop_label_offset_ = nullptr;
}
RenderSettings::RenderSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_proto.RenderSettings)
}
RenderSettings::RenderSettings(const RenderSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RenderSettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.palette_){from._impl_.palette_}
    , decltype(_impl_.underlayer_color_){nullptr}
    , decltype(_impl_.bus_label_offset_){nullptr}
    , decltype(_impl_.stop_label_offset_){nullptr}
    , decltype(_impl_.max_width_){}
    , decltype(_impl_.max_height_){}
    , decltype(_impl_.padding_){}
    , decltype(_impl_.line_width_){}
    , decltype(_impl_.underlayer_width_){}
    , decltype(_impl_.stop_radius_){}
    , decltype(_impl_.bus_label_font_size_){}
    , decltype(_impl_.stop_label_font_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_underlayer_color()) {
    _this->_impl_.underlayer_color_ = new ::svg_proto::Color(*from._impl_.underlayer_color_);
  }
  if (from._internal_has_bus_label_offset()) {
    _this->_impl_.bus_label_offset_ = new ::svg_proto::Point(*from._impl_.bus_label_offset_);
  }
  if (from._internal_has_stop_label_offset()) {
    _this->_impl_.stop_label_offset_ = new ::svg_proto::Point(*from._impl_.stop_label_offset_);
  }
  ::memcpy(&_impl_.max_width_, &from._impl_.max_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stop_label_font_size_) -
    reinterpret_cast<char*>(&_impl_.max_width_)) + sizeof(_impl_.stop_label_font_size_));
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_proto.RenderSettings)
}

inline void RenderSettings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.palette_){arena}
    , decltype(_impl_.underlayer_color_){nullptr}
    , decltype(_impl_.bus_label_offset_){nullptr}
    , decltype(_impl_.stop_label_offset_){nullptr}
    , decltype(_impl_.max_width_){0}
    , decltype(_impl_.max_height_){0}
    , decltype(_impl_.padding_){0}
    , decltype(_impl_.line_width_){0}
    , decltype(_impl_.underlayer_width_){0}
    , decltype(_impl_.stop_radius_){0}
    , decltype(_impl_.bus_label_font_size_){0}
    , decltype(_impl_.stop_label_font_size_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RenderSettings::~RenderSettings() {
  // @@protoc_insertion_point(destructor:transport_catalogue_proto.RenderSettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RenderSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.palette_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.underlayer_color_;
  if (this != internal_default_instance()) delete _impl_.bus_label_offset_;
  if (this != internal_default_instance()) delete _impl_.stop_label_offset_;
}

void RenderSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RenderSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_proto.RenderSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.palette_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.underlayer_color_ != nullptr) {
    delete _impl_.underlayer_color_;
  }
  _impl_.underlayer_color_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bus_label_offset_ != nullptr) {
    delete _impl_.bus_label_offset_;
  }
  _impl_.bus_label_offset_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.stop_label_offset_ != nullptr) {
    delete _impl_.stop_label_offset_;
  }
  _impl_.stop_label_offset_ = nullptr;
  ::memset(&_impl_.max_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.stop_label_font_size_) -
      reinterpret_cast<char*>(&_impl_.max_width_)) + sizeof(_impl_.stop_label_font_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenderSettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double max_width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.max_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.max_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double padding = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.padding_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .svg_proto.Color palette = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_palette(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // double line_width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.line_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .svg_proto.Color underlayer_color = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_underlayer_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double underlayer_width = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.underlayer_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double stop_radius = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.stop_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .svg_proto.Point bus_label_offset = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_bus_label_offset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bus_label_font_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.bus_label_font_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .svg_proto.Point stop_label_offset = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_label_offset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stop_label_font_size = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.stop_label_font_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RenderSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_proto.RenderSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double max_width = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_width = this->_internal_max_width();
  uint64_t raw_max_width;
  memcpy(&raw_max_width, &tmp_max_width, sizeof(tmp_max_width));
  if (raw_max_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_max_width(), target);
  }

  // double max_height = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_height = this->_internal_max_height();
  uint64_t raw_max_height;
  memcpy(&raw_max_height, &tmp_max_height, sizeof(tmp_max_height));
  if (raw_max_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_height(), target);
  }

  // double padding = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_padding = this->_internal_padding();
  uint64_t raw_padding;
  memcpy(&raw_padding, &tmp_padding, sizeof(tmp_padding));
  if (raw_padding != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_padding(), target);
  }

  // repeated .svg_proto.Color palette = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_palette_size()); i < n; i++) {
    const auto& repfield = this->_internal_palette(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // double line_width = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_line_width = this->_internal_line_width();
  uint64_t raw_line_width;
  memcpy(&raw_line_width, &tmp_line_width, sizeof(tmp_line_width));
  if (raw_line_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_line_width(), target);
  }

  // .svg_proto.Color underlayer_color = 6;
  if (this->_internal_has_underlayer_color()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::underlayer_color(this),
        _Internal::underlayer_color(this).GetCachedSize(), target, stream);
  }

  // double underlayer_width = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_underlayer_width = this->_internal_underlayer_width();
  uint64_t raw_underlayer_width;
  memcpy(&raw_underlayer_width, &tmp_underlayer_width, sizeof(tmp_underlayer_width));
  if (raw_underlayer_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_underlayer_width(), target);
  }

  // double stop_radius = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_stop_radius = this->_internal_stop_radius();
  uint64_t raw_stop_radius;
  memcpy(&raw_stop_radius, &tmp_stop_radius, sizeof(tmp_stop_radius));
  if (raw_stop_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_stop_radius(), target);
  }

  // .svg_proto.Point bus_label_offset = 9;
  if (this->_internal_has_bus_label_offset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::bus_label_offset(this),
        _Internal::bus_label_offset(this).GetCachedSize(), target, stream);
  }

  // int32 bus_label_font_size = 10;
  if (this->_internal_bus_label_font_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_bus_label_font_size(), target);
  }

  // .svg_proto.Point stop_label_offset = 11;
  if (this->_internal_has_stop_label_offset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::stop_label_offset(this),
        _Internal::stop_label_offset(this).GetCachedSize(), target, stream);
  }

  // int32 stop_label_font_size = 12;
  if (this->_internal_stop_label_font_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_stop_label_font_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_proto.RenderSettings)
  return target;
}

size_t RenderSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_proto.RenderSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .svg_proto.Color palette = 4;
  total_size += 1UL * this->_internal_palette_size();
  for (const auto& msg : this->_impl_.palette_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .svg_proto.Color underlayer_color = 6;
  if (this->_internal_has_underlayer_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.underlayer_color_);
  }

  // .svg_proto.Point bus_label_offset = 9;
  if (this->_internal_has_bus_label_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bus_label_offset_);
  }

  // .svg_proto.Point stop_label_offset = 11;
  if (this->_internal_has_stop_label_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stop_label_offset_);
  }

  // double max_width = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_width = this->_internal_max_width();
  uint64_t raw_max_width;
  memcpy(&raw_max_width, &tmp_max_width, sizeof(tmp_max_width));
  if (raw_max_width != 0) {
    total_size += 1 + 8;
  }

  // double max_height = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_height = this->_internal_max_height();
  uint64_t raw_max_height;
  memcpy(&raw_max_height, &tmp_max_height, sizeof(tmp_max_height));
  if (raw_max_height != 0) {
    total_size += 1 + 8;
  }

  // double padding = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_padding = this->_internal_padding();
  uint64_t raw_padding;
  memcpy(&raw_padding, &tmp_padding, sizeof(tmp_padding));
  if (raw_padding != 0) {
    total_size += 1 + 8;
  }

  // double line_width = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_line_width = this->_internal_line_width();
  uint64_t raw_line_width;
  memcpy(&raw_line_width, &tmp_line_width, sizeof(tmp_line_width));
  if (raw_line_width != 0) {
    total_size += 1 + 8;
  }

  // double underlayer_width = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_underlayer_width = this->_internal_underlayer_width();
  uint64_t raw_underlayer_width;
  memcpy(&raw_underlayer_width, &tmp_underlayer_width, sizeof(tmp_underlayer_width));
  if (raw_underlayer_width != 0) {
    total_size += 1 + 8;
  }

  // double stop_radius = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_stop_radius = this->_internal_stop_radius();
  uint64_t raw_stop_radius;
  memcpy(&raw_stop_radius, &tmp_stop_radius, sizeof(tmp_stop_radius));
  if (raw_stop_radius != 0) {
    total_size += 1 + 8;
  }

  // int32 bus_label_font_size = 10;
  if (this->_internal_bus_label_font_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bus_label_font_size());
  }

  // int32 stop_label_font_size = 12;
  if (this->_internal_stop_label_font_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stop_label_font_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RenderSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RenderSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RenderSettings::GetClassData() const { return &_class_data_; }


void RenderSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RenderSettings*>(&to_msg);
  auto& from = static_cast<const RenderSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_proto.RenderSettings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.palette_.MergeFrom(from._impl_.palette_);
  if (from._internal_has_underlayer_color()) {
    _this->_internal_mutable_underlayer_color()->::svg_proto::Color::MergeFrom(
        from._internal_underlayer_color());
  }
  if (from._internal_has_bus_label_offset()) {
    _this->_internal_mutable_bus_label_offset()->::svg_proto::Point::MergeFrom(
        from._internal_bus_label_offset());
  }
  if (from._internal_has_stop_label_offset()) {
    _this->_internal_mutable_stop_label_offset()->::svg_proto::Point::MergeFrom(
        from._internal_stop_label_offset());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_width = from._internal_max_width();
  uint64_t raw_max_width;
  memcpy(&raw_max_width, &tmp_max_width, sizeof(tmp_max_width));
  if (raw_max_width != 0) {
    _this->_internal_set_max_width(from._internal_max_width());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_height = from._internal_max_height();
  uint64_t raw_max_height;
  memcpy(&raw_max_height, &tmp_max_height, sizeof(tmp_max_height));
  if (raw_max_height != 0) {
    _this->_internal_set_max_height(from._internal_max_height());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_padding = from._internal_padding();
  uint64_t raw_padding;
  memcpy(&raw_padding, &tmp_padding, sizeof(tmp_padding));
  if (raw_padding != 0) {
    _this->_internal_set_padding(from._internal_padding());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_line_width = from._internal_line_width();
  uint64_t raw_line_width;
  memcpy(&raw_line_width, &tmp_line_width, sizeof(tmp_line_width));
  if (raw_line_width != 0) {
    _this->_internal_set_line_width(from._internal_line_width());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_underlayer_width = from._internal_underlayer_width();
  uint64_t raw_underlayer_width;
  memcpy(&raw_underlayer_width, &tmp_underlayer_width, sizeof(tmp_underlayer_width));
  if (raw_underlayer_width != 0) {
    _this->_internal_set_underlayer_width(from._internal_underlayer_width());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_stop_radius = from._internal_stop_radius();
  uint64_t raw_stop_radius;
  memcpy(&raw_stop_radius, &tmp_stop_radius, sizeof(tmp_stop_radius));
  if (raw_stop_radius != 0) {
    _this->_internal_set_stop_radius(from._internal_stop_radius());
  }
  if (from._internal_bus_label_font_size() != 0) {
    _this->_internal_set_bus_label_font_size(from._internal_bus_label_font_size());
  }
  if (from._internal_stop_label_font_size() != 0) {
    _this->_internal_set_stop_label_font_size(from._internal_stop_label_font_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RenderSettings::CopyFrom(const RenderSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_proto.RenderSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenderSettings::IsInitialized() const {
  return true;
}

void RenderSettings::InternalSwap(RenderSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.palette_.InternalSwap(&other->_impl_.palette_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RenderSettings, _impl_.stop_label_font_size_)
      + sizeof(RenderSettings::_impl_.stop_label_font_size_)
      - PROTOBUF_FIELD_OFFSET(RenderSettings, _impl_.underlayer_color_)>(
          reinterpret_cast<char*>(&_impl_.underlayer_color_),
          reinterpret_cast<char*>(&other->_impl_.underlayer_color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RenderSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_map_5frenderer_2eproto_getter, &descriptor_table_map_5frenderer_2eproto_once,
      file_level_metadata_map_5frenderer_2eproto[0]);
}

// ===================================================================

class StopCoords::_Internal {
 public:
  static const ::svg_proto::Point& point(const StopCoords* msg);
};

const ::svg_proto::Point&
StopCoords::_Internal::point(const StopCoords* msg) {
  return *msg->_impl_.point_;
}
void StopCoords::clear_point() {
  if (GetArenaForAllocation() == nullptr && _impl_.point_ != nullptr) {
    delete _impl_.point_;
  }
  _impl_.point_ = nullptr;
}
StopCoords::StopCoords(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_proto.StopCoords)
}
StopCoords::StopCoords(const StopCoords& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StopCoords* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.point_){nullptr}
    , decltype(_impl_.stop_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_point()) {
    _this->_impl_.point_ = new ::svg_proto::Point(*from._impl_.point_);
  }
  _this->_impl_.stop_ = from._impl_.stop_;
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_proto.StopCoords)
}

inline void StopCoords::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.point_){nullptr}
    , decltype(_impl_.stop_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StopCoords::~StopCoords() {
  // @@protoc_insertion_point(destructor:transport_catalogue_proto.StopCoords)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopCoords::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.point_;
}

void StopCoords::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StopCoords::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_proto.StopCoords)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.point_ != nullptr) {
    delete _impl_.point_;
  }
  _impl_.point_ = nullptr;
  _impl_.stop_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopCoords::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 stop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .svg_proto.Point point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopCoords::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_proto.StopCoords)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 stop = 1;
  if (this->_internal_stop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stop(), target);
  }

  // .svg_proto.Point point = 2;
  if (this->_internal_has_point()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::point(this),
        _Internal::point(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_proto.StopCoords)
  return target;
}

size_t StopCoords::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_proto.StopCoords)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .svg_proto.Point point = 2;
  if (this->_internal_has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.point_);
  }

  // uint32 stop = 1;
  if (this->_internal_stop() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stop());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopCoords::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StopCoords::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopCoords::GetClassData() const { return &_class_data_; }


void StopCoords::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StopCoords*>(&to_msg);
  auto& from = static_cast<const StopCoords&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_proto.StopCoords)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_point()) {
    _this->_internal_mutable_point()->::svg_proto::Point::MergeFrom(
        from._internal_point());
  }
  if (from._internal_stop() != 0) {
    _this->_internal_set_stop(from._internal_stop());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopCoords::CopyFrom(const StopCoords& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_proto.StopCoords)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopCoords::IsInitialized() const {
  return true;
}

void StopCoords::InternalSwap(StopCoords* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopCoords, _impl_.stop_)
      + sizeof(StopCoords::_impl_.stop_)
      - PROTOBUF_FIELD_OFFSET(StopCoords, _impl_.point_)>(
          reinterpret_cast<char*>(&_impl_.point_),
          reinterpret_cast<char*>(&other->_impl_.point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StopCoords::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_map_5frenderer_2eproto_getter, &descriptor_table_map_5frenderer_2eproto_once,
      file_level_metadata_map_5frenderer_2eproto[1]);
}

// ===================================================================

class MapRenderer::_Internal {
 public:
  static const ::transport_catalogue_proto::RenderSettings& render_settings(const MapRenderer* msg);
};

const ::transport_catalogue_proto::RenderSettings&
MapRenderer::_Internal::render_settings(const MapRenderer* msg) {
  return *msg->_impl_.render_settings_;
}
MapRenderer::MapRenderer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_proto.MapRenderer)
}
MapRenderer::MapRenderer(const MapRenderer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MapRenderer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stops_coords_){from._impl_.stops_coords_}
    , decltype(_impl_.render_settings_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_render_settings()) {
    _this->_impl_.render_settings_ = new ::transport_catalogue_proto::RenderSettings(*from._impl_.render_settings_);
  }
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_proto.MapRenderer)
}

inline void MapRenderer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stops_coords_){arena}
    , decltype(_impl_.render_settings_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MapRenderer::~MapRenderer() {
  // @@protoc_insertion_point(destructor:transport_catalogue_proto.MapRenderer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapRenderer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stops_coords_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.render_settings_;
}

void MapRenderer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapRenderer::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_proto.MapRenderer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stops_coords_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.render_settings_ != nullptr) {
    delete _impl_.render_settings_;
  }
  _impl_.render_settings_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapRenderer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .transport_catalogue_proto.RenderSettings render_settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_render_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .transport_catalogue_proto.StopCoords stops_coords = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stops_coords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapRenderer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_proto.MapRenderer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .transport_catalogue_proto.RenderSettings render_settings = 1;
  if (this->_internal_has_render_settings()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::render_settings(this),
        _Internal::render_settings(this).GetCachedSize(), target, stream);
  }

  // repeated .transport_catalogue_proto.StopCoords stops_coords = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stops_coords_size()); i < n; i++) {
    const auto& repfield = this->_internal_stops_coords(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_proto.MapRenderer)
  return target;
}

size_t MapRenderer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_proto.MapRenderer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .transport_catalogue_proto.StopCoords stops_coords = 2;
  total_size += 1UL * this->_internal_stops_coords_size();
  for (const auto& msg : this->_impl_.stops_coords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .transport_catalogue_proto.RenderSettings render_settings = 1;
  if (this->_internal_has_render_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.render_settings_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapRenderer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MapRenderer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapRenderer::GetClassData() const { return &_class_data_; }


void MapRenderer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MapRenderer*>(&to_msg);
  auto& from = static_cast<const MapRenderer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_proto.MapRenderer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stops_coords_.MergeFrom(from._impl_.stops_coords_);
  if (from._internal_has_render_settings()) {
    _this->_internal_mutable_render_settings()->::transport_catalogue_proto::RenderSettings::MergeFrom(
        from._internal_render_settings());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapRenderer::CopyFrom(const MapRenderer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_proto.MapRenderer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapRenderer::IsInitialized() const {
  return true;
}

void MapRenderer::InternalSwap(MapRenderer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stops_coords_.InternalSwap(&other->_impl_.stops_coords_);
  swap(_impl_.render_settings_, other->_impl_.render_settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapRenderer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_map_5frenderer_2eproto_getter, &descriptor_table_map_5frenderer_2eproto_once,
      file_level_metadata_map_5frenderer_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace transport_catalogue_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::transport_catalogue_proto::RenderSettings*
Arena::CreateMaybeMessage< ::transport_catalogue_proto::RenderSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_proto::RenderSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_proto::StopCoords*
Arena::CreateMaybeMessage< ::transport_catalogue_proto::StopCoords >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_proto::StopCoords >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_proto::MapRenderer*
Arena::CreateMaybeMessage< ::transport_catalogue_proto::MapRenderer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_proto::MapRenderer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
