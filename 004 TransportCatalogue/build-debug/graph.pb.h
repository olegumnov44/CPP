// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_graph_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_graph_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_graph_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_graph_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_graph_2eproto;
namespace graph_proto {
class DirectedWeightedGraph;
struct DirectedWeightedGraphDefaultTypeInternal;
extern DirectedWeightedGraphDefaultTypeInternal _DirectedWeightedGraph_default_instance_;
class Edge;
struct EdgeDefaultTypeInternal;
extern EdgeDefaultTypeInternal _Edge_default_instance_;
class RouteInternalData;
struct RouteInternalDataDefaultTypeInternal;
extern RouteInternalDataDefaultTypeInternal _RouteInternalData_default_instance_;
class Router;
struct RouterDefaultTypeInternal;
extern RouterDefaultTypeInternal _Router_default_instance_;
class RoutesInternalDataByTarget;
struct RoutesInternalDataByTargetDefaultTypeInternal;
extern RoutesInternalDataByTargetDefaultTypeInternal _RoutesInternalDataByTarget_default_instance_;
}  // namespace graph_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::graph_proto::DirectedWeightedGraph* Arena::CreateMaybeMessage<::graph_proto::DirectedWeightedGraph>(Arena*);
template<> ::graph_proto::Edge* Arena::CreateMaybeMessage<::graph_proto::Edge>(Arena*);
template<> ::graph_proto::RouteInternalData* Arena::CreateMaybeMessage<::graph_proto::RouteInternalData>(Arena*);
template<> ::graph_proto::Router* Arena::CreateMaybeMessage<::graph_proto::Router>(Arena*);
template<> ::graph_proto::RoutesInternalDataByTarget* Arena::CreateMaybeMessage<::graph_proto::RoutesInternalDataByTarget>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace graph_proto {

// ===================================================================

class Edge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph_proto.Edge) */ {
 public:
  inline Edge() : Edge(nullptr) {}
  ~Edge() override;
  explicit PROTOBUF_CONSTEXPR Edge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Edge(const Edge& from);
  Edge(Edge&& from) noexcept
    : Edge() {
    *this = ::std::move(from);
  }

  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge& operator=(Edge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Edge& default_instance() {
    return *internal_default_instance();
  }
  static inline const Edge* internal_default_instance() {
    return reinterpret_cast<const Edge*>(
               &_Edge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Edge& a, Edge& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Edge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Edge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Edge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Edge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Edge& from) {
    Edge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "graph_proto.Edge";
  }
  protected:
  explicit Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kWeightFieldNumber = 3,
  };
  // uint32 from = 1;
  void clear_from();
  uint32_t from() const;
  void set_from(uint32_t value);
  private:
  uint32_t _internal_from() const;
  void _internal_set_from(uint32_t value);
  public:

  // uint32 to = 2;
  void clear_to();
  uint32_t to() const;
  void set_to(uint32_t value);
  private:
  uint32_t _internal_to() const;
  void _internal_set_to(uint32_t value);
  public:

  // double weight = 3;
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // @@protoc_insertion_point(class_scope:graph_proto.Edge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t from_;
    uint32_t to_;
    double weight_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class DirectedWeightedGraph final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph_proto.DirectedWeightedGraph) */ {
 public:
  inline DirectedWeightedGraph() : DirectedWeightedGraph(nullptr) {}
  ~DirectedWeightedGraph() override;
  explicit PROTOBUF_CONSTEXPR DirectedWeightedGraph(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DirectedWeightedGraph(const DirectedWeightedGraph& from);
  DirectedWeightedGraph(DirectedWeightedGraph&& from) noexcept
    : DirectedWeightedGraph() {
    *this = ::std::move(from);
  }

  inline DirectedWeightedGraph& operator=(const DirectedWeightedGraph& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectedWeightedGraph& operator=(DirectedWeightedGraph&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DirectedWeightedGraph& default_instance() {
    return *internal_default_instance();
  }
  static inline const DirectedWeightedGraph* internal_default_instance() {
    return reinterpret_cast<const DirectedWeightedGraph*>(
               &_DirectedWeightedGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DirectedWeightedGraph& a, DirectedWeightedGraph& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectedWeightedGraph* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirectedWeightedGraph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DirectedWeightedGraph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DirectedWeightedGraph>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DirectedWeightedGraph& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DirectedWeightedGraph& from) {
    DirectedWeightedGraph::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectedWeightedGraph* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "graph_proto.DirectedWeightedGraph";
  }
  protected:
  explicit DirectedWeightedGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgesFieldNumber = 2,
    kVertexCountFieldNumber = 1,
  };
  // repeated .graph_proto.Edge edges = 2;
  int edges_size() const;
  private:
  int _internal_edges_size() const;
  public:
  void clear_edges();
  ::graph_proto::Edge* mutable_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_proto::Edge >*
      mutable_edges();
  private:
  const ::graph_proto::Edge& _internal_edges(int index) const;
  ::graph_proto::Edge* _internal_add_edges();
  public:
  const ::graph_proto::Edge& edges(int index) const;
  ::graph_proto::Edge* add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_proto::Edge >&
      edges() const;

  // uint32 vertex_count = 1;
  void clear_vertex_count();
  uint32_t vertex_count() const;
  void set_vertex_count(uint32_t value);
  private:
  uint32_t _internal_vertex_count() const;
  void _internal_set_vertex_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:graph_proto.DirectedWeightedGraph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_proto::Edge > edges_;
    uint32_t vertex_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class RouteInternalData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph_proto.RouteInternalData) */ {
 public:
  inline RouteInternalData() : RouteInternalData(nullptr) {}
  ~RouteInternalData() override;
  explicit PROTOBUF_CONSTEXPR RouteInternalData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteInternalData(const RouteInternalData& from);
  RouteInternalData(RouteInternalData&& from) noexcept
    : RouteInternalData() {
    *this = ::std::move(from);
  }

  inline RouteInternalData& operator=(const RouteInternalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteInternalData& operator=(RouteInternalData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteInternalData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteInternalData* internal_default_instance() {
    return reinterpret_cast<const RouteInternalData*>(
               &_RouteInternalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RouteInternalData& a, RouteInternalData& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteInternalData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteInternalData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteInternalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouteInternalData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouteInternalData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RouteInternalData& from) {
    RouteInternalData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteInternalData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "graph_proto.RouteInternalData";
  }
  protected:
  explicit RouteInternalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFieldNumber = 2,
    kExistsFieldNumber = 1,
    kHasPrevEdgeFieldNumber = 3,
    kPrevEdgeFieldNumber = 4,
  };
  // double weight = 2;
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // bool exists = 1;
  void clear_exists();
  bool exists() const;
  void set_exists(bool value);
  private:
  bool _internal_exists() const;
  void _internal_set_exists(bool value);
  public:

  // bool has_prev_edge = 3;
  void clear_has_prev_edge();
  bool has_prev_edge() const;
  void set_has_prev_edge(bool value);
  private:
  bool _internal_has_prev_edge() const;
  void _internal_set_has_prev_edge(bool value);
  public:

  // uint32 prev_edge = 4;
  void clear_prev_edge();
  uint32_t prev_edge() const;
  void set_prev_edge(uint32_t value);
  private:
  uint32_t _internal_prev_edge() const;
  void _internal_set_prev_edge(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:graph_proto.RouteInternalData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double weight_;
    bool exists_;
    bool has_prev_edge_;
    uint32_t prev_edge_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class RoutesInternalDataByTarget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph_proto.RoutesInternalDataByTarget) */ {
 public:
  inline RoutesInternalDataByTarget() : RoutesInternalDataByTarget(nullptr) {}
  ~RoutesInternalDataByTarget() override;
  explicit PROTOBUF_CONSTEXPR RoutesInternalDataByTarget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoutesInternalDataByTarget(const RoutesInternalDataByTarget& from);
  RoutesInternalDataByTarget(RoutesInternalDataByTarget&& from) noexcept
    : RoutesInternalDataByTarget() {
    *this = ::std::move(from);
  }

  inline RoutesInternalDataByTarget& operator=(const RoutesInternalDataByTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutesInternalDataByTarget& operator=(RoutesInternalDataByTarget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoutesInternalDataByTarget& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutesInternalDataByTarget* internal_default_instance() {
    return reinterpret_cast<const RoutesInternalDataByTarget*>(
               &_RoutesInternalDataByTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RoutesInternalDataByTarget& a, RoutesInternalDataByTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutesInternalDataByTarget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutesInternalDataByTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoutesInternalDataByTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoutesInternalDataByTarget>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoutesInternalDataByTarget& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoutesInternalDataByTarget& from) {
    RoutesInternalDataByTarget::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutesInternalDataByTarget* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "graph_proto.RoutesInternalDataByTarget";
  }
  protected:
  explicit RoutesInternalDataByTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetsDataFieldNumber = 1,
  };
  // repeated .graph_proto.RouteInternalData targets_data = 1;
  int targets_data_size() const;
  private:
  int _internal_targets_data_size() const;
  public:
  void clear_targets_data();
  ::graph_proto::RouteInternalData* mutable_targets_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_proto::RouteInternalData >*
      mutable_targets_data();
  private:
  const ::graph_proto::RouteInternalData& _internal_targets_data(int index) const;
  ::graph_proto::RouteInternalData* _internal_add_targets_data();
  public:
  const ::graph_proto::RouteInternalData& targets_data(int index) const;
  ::graph_proto::RouteInternalData* add_targets_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_proto::RouteInternalData >&
      targets_data() const;

  // @@protoc_insertion_point(class_scope:graph_proto.RoutesInternalDataByTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_proto::RouteInternalData > targets_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class Router final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph_proto.Router) */ {
 public:
  inline Router() : Router(nullptr) {}
  ~Router() override;
  explicit PROTOBUF_CONSTEXPR Router(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Router(const Router& from);
  Router(Router&& from) noexcept
    : Router() {
    *this = ::std::move(from);
  }

  inline Router& operator=(const Router& from) {
    CopyFrom(from);
    return *this;
  }
  inline Router& operator=(Router&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Router& default_instance() {
    return *internal_default_instance();
  }
  static inline const Router* internal_default_instance() {
    return reinterpret_cast<const Router*>(
               &_Router_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Router& a, Router& b) {
    a.Swap(&b);
  }
  inline void Swap(Router* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Router* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Router* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Router>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Router& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Router& from) {
    Router::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Router* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "graph_proto.Router";
  }
  protected:
  explicit Router(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourcesDataFieldNumber = 1,
  };
  // repeated .graph_proto.RoutesInternalDataByTarget sources_data = 1;
  int sources_data_size() const;
  private:
  int _internal_sources_data_size() const;
  public:
  void clear_sources_data();
  ::graph_proto::RoutesInternalDataByTarget* mutable_sources_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_proto::RoutesInternalDataByTarget >*
      mutable_sources_data();
  private:
  const ::graph_proto::RoutesInternalDataByTarget& _internal_sources_data(int index) const;
  ::graph_proto::RoutesInternalDataByTarget* _internal_add_sources_data();
  public:
  const ::graph_proto::RoutesInternalDataByTarget& sources_data(int index) const;
  ::graph_proto::RoutesInternalDataByTarget* add_sources_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_proto::RoutesInternalDataByTarget >&
      sources_data() const;

  // @@protoc_insertion_point(class_scope:graph_proto.Router)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_proto::RoutesInternalDataByTarget > sources_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Edge

// uint32 from = 1;
inline void Edge::clear_from() {
  _impl_.from_ = 0u;
}
inline uint32_t Edge::_internal_from() const {
  return _impl_.from_;
}
inline uint32_t Edge::from() const {
  // @@protoc_insertion_point(field_get:graph_proto.Edge.from)
  return _internal_from();
}
inline void Edge::_internal_set_from(uint32_t value) {
  
  _impl_.from_ = value;
}
inline void Edge::set_from(uint32_t value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:graph_proto.Edge.from)
}

// uint32 to = 2;
inline void Edge::clear_to() {
  _impl_.to_ = 0u;
}
inline uint32_t Edge::_internal_to() const {
  return _impl_.to_;
}
inline uint32_t Edge::to() const {
  // @@protoc_insertion_point(field_get:graph_proto.Edge.to)
  return _internal_to();
}
inline void Edge::_internal_set_to(uint32_t value) {
  
  _impl_.to_ = value;
}
inline void Edge::set_to(uint32_t value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:graph_proto.Edge.to)
}

// double weight = 3;
inline void Edge::clear_weight() {
  _impl_.weight_ = 0;
}
inline double Edge::_internal_weight() const {
  return _impl_.weight_;
}
inline double Edge::weight() const {
  // @@protoc_insertion_point(field_get:graph_proto.Edge.weight)
  return _internal_weight();
}
inline void Edge::_internal_set_weight(double value) {
  
  _impl_.weight_ = value;
}
inline void Edge::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:graph_proto.Edge.weight)
}

// -------------------------------------------------------------------

// DirectedWeightedGraph

// uint32 vertex_count = 1;
inline void DirectedWeightedGraph::clear_vertex_count() {
  _impl_.vertex_count_ = 0u;
}
inline uint32_t DirectedWeightedGraph::_internal_vertex_count() const {
  return _impl_.vertex_count_;
}
inline uint32_t DirectedWeightedGraph::vertex_count() const {
  // @@protoc_insertion_point(field_get:graph_proto.DirectedWeightedGraph.vertex_count)
  return _internal_vertex_count();
}
inline void DirectedWeightedGraph::_internal_set_vertex_count(uint32_t value) {
  
  _impl_.vertex_count_ = value;
}
inline void DirectedWeightedGraph::set_vertex_count(uint32_t value) {
  _internal_set_vertex_count(value);
  // @@protoc_insertion_point(field_set:graph_proto.DirectedWeightedGraph.vertex_count)
}

// repeated .graph_proto.Edge edges = 2;
inline int DirectedWeightedGraph::_internal_edges_size() const {
  return _impl_.edges_.size();
}
inline int DirectedWeightedGraph::edges_size() const {
  return _internal_edges_size();
}
inline void DirectedWeightedGraph::clear_edges() {
  _impl_.edges_.Clear();
}
inline ::graph_proto::Edge* DirectedWeightedGraph::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:graph_proto.DirectedWeightedGraph.edges)
  return _impl_.edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_proto::Edge >*
DirectedWeightedGraph::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:graph_proto.DirectedWeightedGraph.edges)
  return &_impl_.edges_;
}
inline const ::graph_proto::Edge& DirectedWeightedGraph::_internal_edges(int index) const {
  return _impl_.edges_.Get(index);
}
inline const ::graph_proto::Edge& DirectedWeightedGraph::edges(int index) const {
  // @@protoc_insertion_point(field_get:graph_proto.DirectedWeightedGraph.edges)
  return _internal_edges(index);
}
inline ::graph_proto::Edge* DirectedWeightedGraph::_internal_add_edges() {
  return _impl_.edges_.Add();
}
inline ::graph_proto::Edge* DirectedWeightedGraph::add_edges() {
  ::graph_proto::Edge* _add = _internal_add_edges();
  // @@protoc_insertion_point(field_add:graph_proto.DirectedWeightedGraph.edges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_proto::Edge >&
DirectedWeightedGraph::edges() const {
  // @@protoc_insertion_point(field_list:graph_proto.DirectedWeightedGraph.edges)
  return _impl_.edges_;
}

// -------------------------------------------------------------------

// RouteInternalData

// bool exists = 1;
inline void RouteInternalData::clear_exists() {
  _impl_.exists_ = false;
}
inline bool RouteInternalData::_internal_exists() const {
  return _impl_.exists_;
}
inline bool RouteInternalData::exists() const {
  // @@protoc_insertion_point(field_get:graph_proto.RouteInternalData.exists)
  return _internal_exists();
}
inline void RouteInternalData::_internal_set_exists(bool value) {
  
  _impl_.exists_ = value;
}
inline void RouteInternalData::set_exists(bool value) {
  _internal_set_exists(value);
  // @@protoc_insertion_point(field_set:graph_proto.RouteInternalData.exists)
}

// double weight = 2;
inline void RouteInternalData::clear_weight() {
  _impl_.weight_ = 0;
}
inline double RouteInternalData::_internal_weight() const {
  return _impl_.weight_;
}
inline double RouteInternalData::weight() const {
  // @@protoc_insertion_point(field_get:graph_proto.RouteInternalData.weight)
  return _internal_weight();
}
inline void RouteInternalData::_internal_set_weight(double value) {
  
  _impl_.weight_ = value;
}
inline void RouteInternalData::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:graph_proto.RouteInternalData.weight)
}

// bool has_prev_edge = 3;
inline void RouteInternalData::clear_has_prev_edge() {
  _impl_.has_prev_edge_ = false;
}
inline bool RouteInternalData::_internal_has_prev_edge() const {
  return _impl_.has_prev_edge_;
}
inline bool RouteInternalData::has_prev_edge() const {
  // @@protoc_insertion_point(field_get:graph_proto.RouteInternalData.has_prev_edge)
  return _internal_has_prev_edge();
}
inline void RouteInternalData::_internal_set_has_prev_edge(bool value) {
  
  _impl_.has_prev_edge_ = value;
}
inline void RouteInternalData::set_has_prev_edge(bool value) {
  _internal_set_has_prev_edge(value);
  // @@protoc_insertion_point(field_set:graph_proto.RouteInternalData.has_prev_edge)
}

// uint32 prev_edge = 4;
inline void RouteInternalData::clear_prev_edge() {
  _impl_.prev_edge_ = 0u;
}
inline uint32_t RouteInternalData::_internal_prev_edge() const {
  return _impl_.prev_edge_;
}
inline uint32_t RouteInternalData::prev_edge() const {
  // @@protoc_insertion_point(field_get:graph_proto.RouteInternalData.prev_edge)
  return _internal_prev_edge();
}
inline void RouteInternalData::_internal_set_prev_edge(uint32_t value) {
  
  _impl_.prev_edge_ = value;
}
inline void RouteInternalData::set_prev_edge(uint32_t value) {
  _internal_set_prev_edge(value);
  // @@protoc_insertion_point(field_set:graph_proto.RouteInternalData.prev_edge)
}

// -------------------------------------------------------------------

// RoutesInternalDataByTarget

// repeated .graph_proto.RouteInternalData targets_data = 1;
inline int RoutesInternalDataByTarget::_internal_targets_data_size() const {
  return _impl_.targets_data_.size();
}
inline int RoutesInternalDataByTarget::targets_data_size() const {
  return _internal_targets_data_size();
}
inline void RoutesInternalDataByTarget::clear_targets_data() {
  _impl_.targets_data_.Clear();
}
inline ::graph_proto::RouteInternalData* RoutesInternalDataByTarget::mutable_targets_data(int index) {
  // @@protoc_insertion_point(field_mutable:graph_proto.RoutesInternalDataByTarget.targets_data)
  return _impl_.targets_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_proto::RouteInternalData >*
RoutesInternalDataByTarget::mutable_targets_data() {
  // @@protoc_insertion_point(field_mutable_list:graph_proto.RoutesInternalDataByTarget.targets_data)
  return &_impl_.targets_data_;
}
inline const ::graph_proto::RouteInternalData& RoutesInternalDataByTarget::_internal_targets_data(int index) const {
  return _impl_.targets_data_.Get(index);
}
inline const ::graph_proto::RouteInternalData& RoutesInternalDataByTarget::targets_data(int index) const {
  // @@protoc_insertion_point(field_get:graph_proto.RoutesInternalDataByTarget.targets_data)
  return _internal_targets_data(index);
}
inline ::graph_proto::RouteInternalData* RoutesInternalDataByTarget::_internal_add_targets_data() {
  return _impl_.targets_data_.Add();
}
inline ::graph_proto::RouteInternalData* RoutesInternalDataByTarget::add_targets_data() {
  ::graph_proto::RouteInternalData* _add = _internal_add_targets_data();
  // @@protoc_insertion_point(field_add:graph_proto.RoutesInternalDataByTarget.targets_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_proto::RouteInternalData >&
RoutesInternalDataByTarget::targets_data() const {
  // @@protoc_insertion_point(field_list:graph_proto.RoutesInternalDataByTarget.targets_data)
  return _impl_.targets_data_;
}

// -------------------------------------------------------------------

// Router

// repeated .graph_proto.RoutesInternalDataByTarget sources_data = 1;
inline int Router::_internal_sources_data_size() const {
  return _impl_.sources_data_.size();
}
inline int Router::sources_data_size() const {
  return _internal_sources_data_size();
}
inline void Router::clear_sources_data() {
  _impl_.sources_data_.Clear();
}
inline ::graph_proto::RoutesInternalDataByTarget* Router::mutable_sources_data(int index) {
  // @@protoc_insertion_point(field_mutable:graph_proto.Router.sources_data)
  return _impl_.sources_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_proto::RoutesInternalDataByTarget >*
Router::mutable_sources_data() {
  // @@protoc_insertion_point(field_mutable_list:graph_proto.Router.sources_data)
  return &_impl_.sources_data_;
}
inline const ::graph_proto::RoutesInternalDataByTarget& Router::_internal_sources_data(int index) const {
  return _impl_.sources_data_.Get(index);
}
inline const ::graph_proto::RoutesInternalDataByTarget& Router::sources_data(int index) const {
  // @@protoc_insertion_point(field_get:graph_proto.Router.sources_data)
  return _internal_sources_data(index);
}
inline ::graph_proto::RoutesInternalDataByTarget* Router::_internal_add_sources_data() {
  return _impl_.sources_data_.Add();
}
inline ::graph_proto::RoutesInternalDataByTarget* Router::add_sources_data() {
  ::graph_proto::RoutesInternalDataByTarget* _add = _internal_add_sources_data();
  // @@protoc_insertion_point(field_add:graph_proto.Router.sources_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_proto::RoutesInternalDataByTarget >&
Router::sources_data() const {
  // @@protoc_insertion_point(field_list:graph_proto.Router.sources_data)
  return _impl_.sources_data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace graph_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_graph_2eproto
