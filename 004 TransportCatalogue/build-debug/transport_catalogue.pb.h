// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "map_renderer.pb.h"
#include "transport_router.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fcatalogue_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto;
namespace transport_catalogue_proto {
class Bus;
struct BusDefaultTypeInternal;
extern BusDefaultTypeInternal _Bus_default_instance_;
class Catalogue;
struct CatalogueDefaultTypeInternal;
extern CatalogueDefaultTypeInternal _Catalogue_default_instance_;
class Coordinates;
struct CoordinatesDefaultTypeInternal;
extern CoordinatesDefaultTypeInternal _Coordinates_default_instance_;
class Stop;
struct StopDefaultTypeInternal;
extern StopDefaultTypeInternal _Stop_default_instance_;
class StopDistanceItem;
struct StopDistanceItemDefaultTypeInternal;
extern StopDistanceItemDefaultTypeInternal _StopDistanceItem_default_instance_;
class TransportCatalogue;
struct TransportCatalogueDefaultTypeInternal;
extern TransportCatalogueDefaultTypeInternal _TransportCatalogue_default_instance_;
}  // namespace transport_catalogue_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::transport_catalogue_proto::Bus* Arena::CreateMaybeMessage<::transport_catalogue_proto::Bus>(Arena*);
template<> ::transport_catalogue_proto::Catalogue* Arena::CreateMaybeMessage<::transport_catalogue_proto::Catalogue>(Arena*);
template<> ::transport_catalogue_proto::Coordinates* Arena::CreateMaybeMessage<::transport_catalogue_proto::Coordinates>(Arena*);
template<> ::transport_catalogue_proto::Stop* Arena::CreateMaybeMessage<::transport_catalogue_proto::Stop>(Arena*);
template<> ::transport_catalogue_proto::StopDistanceItem* Arena::CreateMaybeMessage<::transport_catalogue_proto::StopDistanceItem>(Arena*);
template<> ::transport_catalogue_proto::TransportCatalogue* Arena::CreateMaybeMessage<::transport_catalogue_proto::TransportCatalogue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace transport_catalogue_proto {

// ===================================================================

class Coordinates final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.Coordinates) */ {
 public:
  inline Coordinates() : Coordinates(nullptr) {}
  ~Coordinates() override;
  explicit PROTOBUF_CONSTEXPR Coordinates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Coordinates(const Coordinates& from);
  Coordinates(Coordinates&& from) noexcept
    : Coordinates() {
    *this = ::std::move(from);
  }

  inline Coordinates& operator=(const Coordinates& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coordinates& operator=(Coordinates&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Coordinates& default_instance() {
    return *internal_default_instance();
  }
  static inline const Coordinates* internal_default_instance() {
    return reinterpret_cast<const Coordinates*>(
               &_Coordinates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Coordinates& a, Coordinates& b) {
    a.Swap(&b);
  }
  inline void Swap(Coordinates* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coordinates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Coordinates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Coordinates>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Coordinates& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Coordinates& from) {
    Coordinates::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coordinates* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.Coordinates";
  }
  protected:
  explicit Coordinates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
  };
  // double latitude = 1;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 2;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.Coordinates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double latitude_;
    double longitude_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Stop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.Stop) */ {
 public:
  inline Stop() : Stop(nullptr) {}
  ~Stop() override;
  explicit PROTOBUF_CONSTEXPR Stop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stop(const Stop& from);
  Stop(Stop&& from) noexcept
    : Stop() {
    *this = ::std::move(from);
  }

  inline Stop& operator=(const Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stop& operator=(Stop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stop* internal_default_instance() {
    return reinterpret_cast<const Stop*>(
               &_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Stop& a, Stop& b) {
    a.Swap(&b);
  }
  inline void Swap(Stop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Stop& from) {
    Stop::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.Stop";
  }
  protected:
  explicit Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPositionFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .transport_catalogue_proto.Coordinates position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::transport_catalogue_proto::Coordinates& position() const;
  PROTOBUF_NODISCARD ::transport_catalogue_proto::Coordinates* release_position();
  ::transport_catalogue_proto::Coordinates* mutable_position();
  void set_allocated_position(::transport_catalogue_proto::Coordinates* position);
  private:
  const ::transport_catalogue_proto::Coordinates& _internal_position() const;
  ::transport_catalogue_proto::Coordinates* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::transport_catalogue_proto::Coordinates* position);
  ::transport_catalogue_proto::Coordinates* unsafe_arena_release_position();

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.Stop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::transport_catalogue_proto::Coordinates* position_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Bus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.Bus) */ {
 public:
  inline Bus() : Bus(nullptr) {}
  ~Bus() override;
  explicit PROTOBUF_CONSTEXPR Bus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bus(const Bus& from);
  Bus(Bus&& from) noexcept
    : Bus() {
    *this = ::std::move(from);
  }

  inline Bus& operator=(const Bus& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bus& operator=(Bus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bus& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bus* internal_default_instance() {
    return reinterpret_cast<const Bus*>(
               &_Bus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Bus& a, Bus& b) {
    a.Swap(&b);
  }
  inline void Swap(Bus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bus& from) {
    Bus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.Bus";
  }
  protected:
  explicit Bus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsFieldNumber = 2,
    kEndpointsFieldNumber = 3,
    kNameFieldNumber = 1,
  };
  // repeated uint32 stops = 2;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  private:
  uint32_t _internal_stops(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_stops() const;
  void _internal_add_stops(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_stops();
  public:
  uint32_t stops(int index) const;
  void set_stops(int index, uint32_t value);
  void add_stops(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      stops() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_stops();

  // repeated uint32 endpoints = 3;
  int endpoints_size() const;
  private:
  int _internal_endpoints_size() const;
  public:
  void clear_endpoints();
  private:
  uint32_t _internal_endpoints(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_endpoints() const;
  void _internal_add_endpoints(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_endpoints();
  public:
  uint32_t endpoints(int index) const;
  void set_endpoints(int index, uint32_t value);
  void add_endpoints(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      endpoints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_endpoints();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.Bus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > stops_;
    mutable std::atomic<int> _stops_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > endpoints_;
    mutable std::atomic<int> _endpoints_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class StopDistanceItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.StopDistanceItem) */ {
 public:
  inline StopDistanceItem() : StopDistanceItem(nullptr) {}
  ~StopDistanceItem() override;
  explicit PROTOBUF_CONSTEXPR StopDistanceItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopDistanceItem(const StopDistanceItem& from);
  StopDistanceItem(StopDistanceItem&& from) noexcept
    : StopDistanceItem() {
    *this = ::std::move(from);
  }

  inline StopDistanceItem& operator=(const StopDistanceItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopDistanceItem& operator=(StopDistanceItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopDistanceItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopDistanceItem* internal_default_instance() {
    return reinterpret_cast<const StopDistanceItem*>(
               &_StopDistanceItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StopDistanceItem& a, StopDistanceItem& b) {
    a.Swap(&b);
  }
  inline void Swap(StopDistanceItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopDistanceItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopDistanceItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopDistanceItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopDistanceItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StopDistanceItem& from) {
    StopDistanceItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopDistanceItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.StopDistanceItem";
  }
  protected:
  explicit StopDistanceItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kDistanceFieldNumber = 3,
  };
  // uint32 from = 1;
  void clear_from();
  uint32_t from() const;
  void set_from(uint32_t value);
  private:
  uint32_t _internal_from() const;
  void _internal_set_from(uint32_t value);
  public:

  // uint32 to = 2;
  void clear_to();
  uint32_t to() const;
  void set_to(uint32_t value);
  private:
  uint32_t _internal_to() const;
  void _internal_set_to(uint32_t value);
  public:

  // int32 distance = 3;
  void clear_distance();
  int32_t distance() const;
  void set_distance(int32_t value);
  private:
  int32_t _internal_distance() const;
  void _internal_set_distance(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.StopDistanceItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t from_;
    uint32_t to_;
    int32_t distance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Catalogue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.Catalogue) */ {
 public:
  inline Catalogue() : Catalogue(nullptr) {}
  ~Catalogue() override;
  explicit PROTOBUF_CONSTEXPR Catalogue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Catalogue(const Catalogue& from);
  Catalogue(Catalogue&& from) noexcept
    : Catalogue() {
    *this = ::std::move(from);
  }

  inline Catalogue& operator=(const Catalogue& from) {
    CopyFrom(from);
    return *this;
  }
  inline Catalogue& operator=(Catalogue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Catalogue& default_instance() {
    return *internal_default_instance();
  }
  static inline const Catalogue* internal_default_instance() {
    return reinterpret_cast<const Catalogue*>(
               &_Catalogue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Catalogue& a, Catalogue& b) {
    a.Swap(&b);
  }
  inline void Swap(Catalogue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Catalogue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Catalogue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Catalogue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Catalogue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Catalogue& from) {
    Catalogue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Catalogue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.Catalogue";
  }
  protected:
  explicit Catalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsFieldNumber = 1,
    kBusesFieldNumber = 2,
    kStopDistancesFieldNumber = 3,
  };
  // repeated .transport_catalogue_proto.Stop stops = 1;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  ::transport_catalogue_proto::Stop* mutable_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Stop >*
      mutable_stops();
  private:
  const ::transport_catalogue_proto::Stop& _internal_stops(int index) const;
  ::transport_catalogue_proto::Stop* _internal_add_stops();
  public:
  const ::transport_catalogue_proto::Stop& stops(int index) const;
  ::transport_catalogue_proto::Stop* add_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Stop >&
      stops() const;

  // repeated .transport_catalogue_proto.Bus buses = 2;
  int buses_size() const;
  private:
  int _internal_buses_size() const;
  public:
  void clear_buses();
  ::transport_catalogue_proto::Bus* mutable_buses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Bus >*
      mutable_buses();
  private:
  const ::transport_catalogue_proto::Bus& _internal_buses(int index) const;
  ::transport_catalogue_proto::Bus* _internal_add_buses();
  public:
  const ::transport_catalogue_proto::Bus& buses(int index) const;
  ::transport_catalogue_proto::Bus* add_buses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Bus >&
      buses() const;

  // repeated .transport_catalogue_proto.StopDistanceItem stop_distances = 3;
  int stop_distances_size() const;
  private:
  int _internal_stop_distances_size() const;
  public:
  void clear_stop_distances();
  ::transport_catalogue_proto::StopDistanceItem* mutable_stop_distances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::StopDistanceItem >*
      mutable_stop_distances();
  private:
  const ::transport_catalogue_proto::StopDistanceItem& _internal_stop_distances(int index) const;
  ::transport_catalogue_proto::StopDistanceItem* _internal_add_stop_distances();
  public:
  const ::transport_catalogue_proto::StopDistanceItem& stop_distances(int index) const;
  ::transport_catalogue_proto::StopDistanceItem* add_stop_distances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::StopDistanceItem >&
      stop_distances() const;

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.Catalogue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Stop > stops_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Bus > buses_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::StopDistanceItem > stop_distances_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class TransportCatalogue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.TransportCatalogue) */ {
 public:
  inline TransportCatalogue() : TransportCatalogue(nullptr) {}
  ~TransportCatalogue() override;
  explicit PROTOBUF_CONSTEXPR TransportCatalogue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportCatalogue(const TransportCatalogue& from);
  TransportCatalogue(TransportCatalogue&& from) noexcept
    : TransportCatalogue() {
    *this = ::std::move(from);
  }

  inline TransportCatalogue& operator=(const TransportCatalogue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportCatalogue& operator=(TransportCatalogue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportCatalogue& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportCatalogue* internal_default_instance() {
    return reinterpret_cast<const TransportCatalogue*>(
               &_TransportCatalogue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TransportCatalogue& a, TransportCatalogue& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportCatalogue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportCatalogue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransportCatalogue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransportCatalogue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportCatalogue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransportCatalogue& from) {
    TransportCatalogue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportCatalogue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.TransportCatalogue";
  }
  protected:
  explicit TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCatalogueFieldNumber = 1,
    kRendererFieldNumber = 2,
    kRouterFieldNumber = 3,
  };
  // .transport_catalogue_proto.Catalogue catalogue = 1;
  bool has_catalogue() const;
  private:
  bool _internal_has_catalogue() const;
  public:
  void clear_catalogue();
  const ::transport_catalogue_proto::Catalogue& catalogue() const;
  PROTOBUF_NODISCARD ::transport_catalogue_proto::Catalogue* release_catalogue();
  ::transport_catalogue_proto::Catalogue* mutable_catalogue();
  void set_allocated_catalogue(::transport_catalogue_proto::Catalogue* catalogue);
  private:
  const ::transport_catalogue_proto::Catalogue& _internal_catalogue() const;
  ::transport_catalogue_proto::Catalogue* _internal_mutable_catalogue();
  public:
  void unsafe_arena_set_allocated_catalogue(
      ::transport_catalogue_proto::Catalogue* catalogue);
  ::transport_catalogue_proto::Catalogue* unsafe_arena_release_catalogue();

  // .transport_catalogue_proto.MapRenderer renderer = 2;
  bool has_renderer() const;
  private:
  bool _internal_has_renderer() const;
  public:
  void clear_renderer();
  const ::transport_catalogue_proto::MapRenderer& renderer() const;
  PROTOBUF_NODISCARD ::transport_catalogue_proto::MapRenderer* release_renderer();
  ::transport_catalogue_proto::MapRenderer* mutable_renderer();
  void set_allocated_renderer(::transport_catalogue_proto::MapRenderer* renderer);
  private:
  const ::transport_catalogue_proto::MapRenderer& _internal_renderer() const;
  ::transport_catalogue_proto::MapRenderer* _internal_mutable_renderer();
  public:
  void unsafe_arena_set_allocated_renderer(
      ::transport_catalogue_proto::MapRenderer* renderer);
  ::transport_catalogue_proto::MapRenderer* unsafe_arena_release_renderer();

  // .transport_catalogue_proto.TransportRouter router = 3;
  bool has_router() const;
  private:
  bool _internal_has_router() const;
  public:
  void clear_router();
  const ::transport_catalogue_proto::TransportRouter& router() const;
  PROTOBUF_NODISCARD ::transport_catalogue_proto::TransportRouter* release_router();
  ::transport_catalogue_proto::TransportRouter* mutable_router();
  void set_allocated_router(::transport_catalogue_proto::TransportRouter* router);
  private:
  const ::transport_catalogue_proto::TransportRouter& _internal_router() const;
  ::transport_catalogue_proto::TransportRouter* _internal_mutable_router();
  public:
  void unsafe_arena_set_allocated_router(
      ::transport_catalogue_proto::TransportRouter* router);
  ::transport_catalogue_proto::TransportRouter* unsafe_arena_release_router();

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.TransportCatalogue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::transport_catalogue_proto::Catalogue* catalogue_;
    ::transport_catalogue_proto::MapRenderer* renderer_;
    ::transport_catalogue_proto::TransportRouter* router_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Coordinates

// double latitude = 1;
inline void Coordinates::clear_latitude() {
  _impl_.latitude_ = 0;
}
inline double Coordinates::_internal_latitude() const {
  return _impl_.latitude_;
}
inline double Coordinates::latitude() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.Coordinates.latitude)
  return _internal_latitude();
}
inline void Coordinates::_internal_set_latitude(double value) {
  
  _impl_.latitude_ = value;
}
inline void Coordinates::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.Coordinates.latitude)
}

// double longitude = 2;
inline void Coordinates::clear_longitude() {
  _impl_.longitude_ = 0;
}
inline double Coordinates::_internal_longitude() const {
  return _impl_.longitude_;
}
inline double Coordinates::longitude() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.Coordinates.longitude)
  return _internal_longitude();
}
inline void Coordinates::_internal_set_longitude(double value) {
  
  _impl_.longitude_ = value;
}
inline void Coordinates::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.Coordinates.longitude)
}

// -------------------------------------------------------------------

// Stop

// string name = 1;
inline void Stop::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Stop::name() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.Stop.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Stop::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.Stop.name)
}
inline std::string* Stop::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.Stop.name)
  return _s;
}
inline const std::string& Stop::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Stop::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Stop::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Stop::release_name() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.Stop.name)
  return _impl_.name_.Release();
}
inline void Stop::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_proto.Stop.name)
}

// .transport_catalogue_proto.Coordinates position = 2;
inline bool Stop::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool Stop::has_position() const {
  return _internal_has_position();
}
inline void Stop::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::transport_catalogue_proto::Coordinates& Stop::_internal_position() const {
  const ::transport_catalogue_proto::Coordinates* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_proto::Coordinates&>(
      ::transport_catalogue_proto::_Coordinates_default_instance_);
}
inline const ::transport_catalogue_proto::Coordinates& Stop::position() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.Stop.position)
  return _internal_position();
}
inline void Stop::unsafe_arena_set_allocated_position(
    ::transport_catalogue_proto::Coordinates* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_proto.Stop.position)
}
inline ::transport_catalogue_proto::Coordinates* Stop::release_position() {
  
  ::transport_catalogue_proto::Coordinates* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::transport_catalogue_proto::Coordinates* Stop::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.Stop.position)
  
  ::transport_catalogue_proto::Coordinates* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::transport_catalogue_proto::Coordinates* Stop::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_proto::Coordinates>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::transport_catalogue_proto::Coordinates* Stop::mutable_position() {
  ::transport_catalogue_proto::Coordinates* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.Stop.position)
  return _msg;
}
inline void Stop::set_allocated_position(::transport_catalogue_proto::Coordinates* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_proto.Stop.position)
}

// -------------------------------------------------------------------

// Bus

// string name = 1;
inline void Bus::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Bus::name() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.Bus.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bus::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.Bus.name)
}
inline std::string* Bus::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.Bus.name)
  return _s;
}
inline const std::string& Bus::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Bus::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Bus::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Bus::release_name() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.Bus.name)
  return _impl_.name_.Release();
}
inline void Bus::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_proto.Bus.name)
}

// repeated uint32 stops = 2;
inline int Bus::_internal_stops_size() const {
  return _impl_.stops_.size();
}
inline int Bus::stops_size() const {
  return _internal_stops_size();
}
inline void Bus::clear_stops() {
  _impl_.stops_.Clear();
}
inline uint32_t Bus::_internal_stops(int index) const {
  return _impl_.stops_.Get(index);
}
inline uint32_t Bus::stops(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.Bus.stops)
  return _internal_stops(index);
}
inline void Bus::set_stops(int index, uint32_t value) {
  _impl_.stops_.Set(index, value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.Bus.stops)
}
inline void Bus::_internal_add_stops(uint32_t value) {
  _impl_.stops_.Add(value);
}
inline void Bus::add_stops(uint32_t value) {
  _internal_add_stops(value);
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.Bus.stops)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Bus::_internal_stops() const {
  return _impl_.stops_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Bus::stops() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_proto.Bus.stops)
  return _internal_stops();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Bus::_internal_mutable_stops() {
  return &_impl_.stops_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Bus::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_proto.Bus.stops)
  return _internal_mutable_stops();
}

// repeated uint32 endpoints = 3;
inline int Bus::_internal_endpoints_size() const {
  return _impl_.endpoints_.size();
}
inline int Bus::endpoints_size() const {
  return _internal_endpoints_size();
}
inline void Bus::clear_endpoints() {
  _impl_.endpoints_.Clear();
}
inline uint32_t Bus::_internal_endpoints(int index) const {
  return _impl_.endpoints_.Get(index);
}
inline uint32_t Bus::endpoints(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.Bus.endpoints)
  return _internal_endpoints(index);
}
inline void Bus::set_endpoints(int index, uint32_t value) {
  _impl_.endpoints_.Set(index, value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.Bus.endpoints)
}
inline void Bus::_internal_add_endpoints(uint32_t value) {
  _impl_.endpoints_.Add(value);
}
inline void Bus::add_endpoints(uint32_t value) {
  _internal_add_endpoints(value);
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.Bus.endpoints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Bus::_internal_endpoints() const {
  return _impl_.endpoints_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Bus::endpoints() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_proto.Bus.endpoints)
  return _internal_endpoints();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Bus::_internal_mutable_endpoints() {
  return &_impl_.endpoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Bus::mutable_endpoints() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_proto.Bus.endpoints)
  return _internal_mutable_endpoints();
}

// -------------------------------------------------------------------

// StopDistanceItem

// uint32 from = 1;
inline void StopDistanceItem::clear_from() {
  _impl_.from_ = 0u;
}
inline uint32_t StopDistanceItem::_internal_from() const {
  return _impl_.from_;
}
inline uint32_t StopDistanceItem::from() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.StopDistanceItem.from)
  return _internal_from();
}
inline void StopDistanceItem::_internal_set_from(uint32_t value) {
  
  _impl_.from_ = value;
}
inline void StopDistanceItem::set_from(uint32_t value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.StopDistanceItem.from)
}

// uint32 to = 2;
inline void StopDistanceItem::clear_to() {
  _impl_.to_ = 0u;
}
inline uint32_t StopDistanceItem::_internal_to() const {
  return _impl_.to_;
}
inline uint32_t StopDistanceItem::to() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.StopDistanceItem.to)
  return _internal_to();
}
inline void StopDistanceItem::_internal_set_to(uint32_t value) {
  
  _impl_.to_ = value;
}
inline void StopDistanceItem::set_to(uint32_t value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.StopDistanceItem.to)
}

// int32 distance = 3;
inline void StopDistanceItem::clear_distance() {
  _impl_.distance_ = 0;
}
inline int32_t StopDistanceItem::_internal_distance() const {
  return _impl_.distance_;
}
inline int32_t StopDistanceItem::distance() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.StopDistanceItem.distance)
  return _internal_distance();
}
inline void StopDistanceItem::_internal_set_distance(int32_t value) {
  
  _impl_.distance_ = value;
}
inline void StopDistanceItem::set_distance(int32_t value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.StopDistanceItem.distance)
}

// -------------------------------------------------------------------

// Catalogue

// repeated .transport_catalogue_proto.Stop stops = 1;
inline int Catalogue::_internal_stops_size() const {
  return _impl_.stops_.size();
}
inline int Catalogue::stops_size() const {
  return _internal_stops_size();
}
inline void Catalogue::clear_stops() {
  _impl_.stops_.Clear();
}
inline ::transport_catalogue_proto::Stop* Catalogue::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.Catalogue.stops)
  return _impl_.stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Stop >*
Catalogue::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_proto.Catalogue.stops)
  return &_impl_.stops_;
}
inline const ::transport_catalogue_proto::Stop& Catalogue::_internal_stops(int index) const {
  return _impl_.stops_.Get(index);
}
inline const ::transport_catalogue_proto::Stop& Catalogue::stops(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.Catalogue.stops)
  return _internal_stops(index);
}
inline ::transport_catalogue_proto::Stop* Catalogue::_internal_add_stops() {
  return _impl_.stops_.Add();
}
inline ::transport_catalogue_proto::Stop* Catalogue::add_stops() {
  ::transport_catalogue_proto::Stop* _add = _internal_add_stops();
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.Catalogue.stops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Stop >&
Catalogue::stops() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_proto.Catalogue.stops)
  return _impl_.stops_;
}

// repeated .transport_catalogue_proto.Bus buses = 2;
inline int Catalogue::_internal_buses_size() const {
  return _impl_.buses_.size();
}
inline int Catalogue::buses_size() const {
  return _internal_buses_size();
}
inline void Catalogue::clear_buses() {
  _impl_.buses_.Clear();
}
inline ::transport_catalogue_proto::Bus* Catalogue::mutable_buses(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.Catalogue.buses)
  return _impl_.buses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Bus >*
Catalogue::mutable_buses() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_proto.Catalogue.buses)
  return &_impl_.buses_;
}
inline const ::transport_catalogue_proto::Bus& Catalogue::_internal_buses(int index) const {
  return _impl_.buses_.Get(index);
}
inline const ::transport_catalogue_proto::Bus& Catalogue::buses(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.Catalogue.buses)
  return _internal_buses(index);
}
inline ::transport_catalogue_proto::Bus* Catalogue::_internal_add_buses() {
  return _impl_.buses_.Add();
}
inline ::transport_catalogue_proto::Bus* Catalogue::add_buses() {
  ::transport_catalogue_proto::Bus* _add = _internal_add_buses();
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.Catalogue.buses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Bus >&
Catalogue::buses() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_proto.Catalogue.buses)
  return _impl_.buses_;
}

// repeated .transport_catalogue_proto.StopDistanceItem stop_distances = 3;
inline int Catalogue::_internal_stop_distances_size() const {
  return _impl_.stop_distances_.size();
}
inline int Catalogue::stop_distances_size() const {
  return _internal_stop_distances_size();
}
inline void Catalogue::clear_stop_distances() {
  _impl_.stop_distances_.Clear();
}
inline ::transport_catalogue_proto::StopDistanceItem* Catalogue::mutable_stop_distances(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.Catalogue.stop_distances)
  return _impl_.stop_distances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::StopDistanceItem >*
Catalogue::mutable_stop_distances() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_proto.Catalogue.stop_distances)
  return &_impl_.stop_distances_;
}
inline const ::transport_catalogue_proto::StopDistanceItem& Catalogue::_internal_stop_distances(int index) const {
  return _impl_.stop_distances_.Get(index);
}
inline const ::transport_catalogue_proto::StopDistanceItem& Catalogue::stop_distances(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.Catalogue.stop_distances)
  return _internal_stop_distances(index);
}
inline ::transport_catalogue_proto::StopDistanceItem* Catalogue::_internal_add_stop_distances() {
  return _impl_.stop_distances_.Add();
}
inline ::transport_catalogue_proto::StopDistanceItem* Catalogue::add_stop_distances() {
  ::transport_catalogue_proto::StopDistanceItem* _add = _internal_add_stop_distances();
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.Catalogue.stop_distances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::StopDistanceItem >&
Catalogue::stop_distances() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_proto.Catalogue.stop_distances)
  return _impl_.stop_distances_;
}

// -------------------------------------------------------------------

// TransportCatalogue

// .transport_catalogue_proto.Catalogue catalogue = 1;
inline bool TransportCatalogue::_internal_has_catalogue() const {
  return this != internal_default_instance() && _impl_.catalogue_ != nullptr;
}
inline bool TransportCatalogue::has_catalogue() const {
  return _internal_has_catalogue();
}
inline void TransportCatalogue::clear_catalogue() {
  if (GetArenaForAllocation() == nullptr && _impl_.catalogue_ != nullptr) {
    delete _impl_.catalogue_;
  }
  _impl_.catalogue_ = nullptr;
}
inline const ::transport_catalogue_proto::Catalogue& TransportCatalogue::_internal_catalogue() const {
  const ::transport_catalogue_proto::Catalogue* p = _impl_.catalogue_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_proto::Catalogue&>(
      ::transport_catalogue_proto::_Catalogue_default_instance_);
}
inline const ::transport_catalogue_proto::Catalogue& TransportCatalogue::catalogue() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.TransportCatalogue.catalogue)
  return _internal_catalogue();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_catalogue(
    ::transport_catalogue_proto::Catalogue* catalogue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.catalogue_);
  }
  _impl_.catalogue_ = catalogue;
  if (catalogue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_proto.TransportCatalogue.catalogue)
}
inline ::transport_catalogue_proto::Catalogue* TransportCatalogue::release_catalogue() {
  
  ::transport_catalogue_proto::Catalogue* temp = _impl_.catalogue_;
  _impl_.catalogue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::transport_catalogue_proto::Catalogue* TransportCatalogue::unsafe_arena_release_catalogue() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.TransportCatalogue.catalogue)
  
  ::transport_catalogue_proto::Catalogue* temp = _impl_.catalogue_;
  _impl_.catalogue_ = nullptr;
  return temp;
}
inline ::transport_catalogue_proto::Catalogue* TransportCatalogue::_internal_mutable_catalogue() {
  
  if (_impl_.catalogue_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_proto::Catalogue>(GetArenaForAllocation());
    _impl_.catalogue_ = p;
  }
  return _impl_.catalogue_;
}
inline ::transport_catalogue_proto::Catalogue* TransportCatalogue::mutable_catalogue() {
  ::transport_catalogue_proto::Catalogue* _msg = _internal_mutable_catalogue();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.TransportCatalogue.catalogue)
  return _msg;
}
inline void TransportCatalogue::set_allocated_catalogue(::transport_catalogue_proto::Catalogue* catalogue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.catalogue_;
  }
  if (catalogue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(catalogue);
    if (message_arena != submessage_arena) {
      catalogue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, catalogue, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.catalogue_ = catalogue;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_proto.TransportCatalogue.catalogue)
}

// .transport_catalogue_proto.MapRenderer renderer = 2;
inline bool TransportCatalogue::_internal_has_renderer() const {
  return this != internal_default_instance() && _impl_.renderer_ != nullptr;
}
inline bool TransportCatalogue::has_renderer() const {
  return _internal_has_renderer();
}
inline const ::transport_catalogue_proto::MapRenderer& TransportCatalogue::_internal_renderer() const {
  const ::transport_catalogue_proto::MapRenderer* p = _impl_.renderer_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_proto::MapRenderer&>(
      ::transport_catalogue_proto::_MapRenderer_default_instance_);
}
inline const ::transport_catalogue_proto::MapRenderer& TransportCatalogue::renderer() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.TransportCatalogue.renderer)
  return _internal_renderer();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_renderer(
    ::transport_catalogue_proto::MapRenderer* renderer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.renderer_);
  }
  _impl_.renderer_ = renderer;
  if (renderer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_proto.TransportCatalogue.renderer)
}
inline ::transport_catalogue_proto::MapRenderer* TransportCatalogue::release_renderer() {
  
  ::transport_catalogue_proto::MapRenderer* temp = _impl_.renderer_;
  _impl_.renderer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::transport_catalogue_proto::MapRenderer* TransportCatalogue::unsafe_arena_release_renderer() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.TransportCatalogue.renderer)
  
  ::transport_catalogue_proto::MapRenderer* temp = _impl_.renderer_;
  _impl_.renderer_ = nullptr;
  return temp;
}
inline ::transport_catalogue_proto::MapRenderer* TransportCatalogue::_internal_mutable_renderer() {
  
  if (_impl_.renderer_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_proto::MapRenderer>(GetArenaForAllocation());
    _impl_.renderer_ = p;
  }
  return _impl_.renderer_;
}
inline ::transport_catalogue_proto::MapRenderer* TransportCatalogue::mutable_renderer() {
  ::transport_catalogue_proto::MapRenderer* _msg = _internal_mutable_renderer();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.TransportCatalogue.renderer)
  return _msg;
}
inline void TransportCatalogue::set_allocated_renderer(::transport_catalogue_proto::MapRenderer* renderer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.renderer_);
  }
  if (renderer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(renderer));
    if (message_arena != submessage_arena) {
      renderer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, renderer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.renderer_ = renderer;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_proto.TransportCatalogue.renderer)
}

// .transport_catalogue_proto.TransportRouter router = 3;
inline bool TransportCatalogue::_internal_has_router() const {
  return this != internal_default_instance() && _impl_.router_ != nullptr;
}
inline bool TransportCatalogue::has_router() const {
  return _internal_has_router();
}
inline const ::transport_catalogue_proto::TransportRouter& TransportCatalogue::_internal_router() const {
  const ::transport_catalogue_proto::TransportRouter* p = _impl_.router_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_proto::TransportRouter&>(
      ::transport_catalogue_proto::_TransportRouter_default_instance_);
}
inline const ::transport_catalogue_proto::TransportRouter& TransportCatalogue::router() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.TransportCatalogue.router)
  return _internal_router();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_router(
    ::transport_catalogue_proto::TransportRouter* router) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.router_);
  }
  _impl_.router_ = router;
  if (router) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_proto.TransportCatalogue.router)
}
inline ::transport_catalogue_proto::TransportRouter* TransportCatalogue::release_router() {
  
  ::transport_catalogue_proto::TransportRouter* temp = _impl_.router_;
  _impl_.router_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::transport_catalogue_proto::TransportRouter* TransportCatalogue::unsafe_arena_release_router() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.TransportCatalogue.router)
  
  ::transport_catalogue_proto::TransportRouter* temp = _impl_.router_;
  _impl_.router_ = nullptr;
  return temp;
}
inline ::transport_catalogue_proto::TransportRouter* TransportCatalogue::_internal_mutable_router() {
  
  if (_impl_.router_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_proto::TransportRouter>(GetArenaForAllocation());
    _impl_.router_ = p;
  }
  return _impl_.router_;
}
inline ::transport_catalogue_proto::TransportRouter* TransportCatalogue::mutable_router() {
  ::transport_catalogue_proto::TransportRouter* _msg = _internal_mutable_router();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.TransportCatalogue.router)
  return _msg;
}
inline void TransportCatalogue::set_allocated_router(::transport_catalogue_proto::TransportRouter* router) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.router_);
  }
  if (router) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router));
    if (message_arena != submessage_arena) {
      router = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, router, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.router_ = router;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_proto.TransportCatalogue.router)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace transport_catalogue_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
