// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_router.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "graph.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5frouter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5frouter_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5frouter_2eproto;
namespace transport_catalogue_proto {
class BusEdgeInfo;
struct BusEdgeInfoDefaultTypeInternal;
extern BusEdgeInfoDefaultTypeInternal _BusEdgeInfo_default_instance_;
class EdgeInfo;
struct EdgeInfoDefaultTypeInternal;
extern EdgeInfoDefaultTypeInternal _EdgeInfo_default_instance_;
class RoutingSettings;
struct RoutingSettingsDefaultTypeInternal;
extern RoutingSettingsDefaultTypeInternal _RoutingSettings_default_instance_;
class StopVertexIds;
struct StopVertexIdsDefaultTypeInternal;
extern StopVertexIdsDefaultTypeInternal _StopVertexIds_default_instance_;
class TransportRouter;
struct TransportRouterDefaultTypeInternal;
extern TransportRouterDefaultTypeInternal _TransportRouter_default_instance_;
class VertexInfo;
struct VertexInfoDefaultTypeInternal;
extern VertexInfoDefaultTypeInternal _VertexInfo_default_instance_;
class WaitEdgeInfo;
struct WaitEdgeInfoDefaultTypeInternal;
extern WaitEdgeInfoDefaultTypeInternal _WaitEdgeInfo_default_instance_;
}  // namespace transport_catalogue_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::transport_catalogue_proto::BusEdgeInfo* Arena::CreateMaybeMessage<::transport_catalogue_proto::BusEdgeInfo>(Arena*);
template<> ::transport_catalogue_proto::EdgeInfo* Arena::CreateMaybeMessage<::transport_catalogue_proto::EdgeInfo>(Arena*);
template<> ::transport_catalogue_proto::RoutingSettings* Arena::CreateMaybeMessage<::transport_catalogue_proto::RoutingSettings>(Arena*);
template<> ::transport_catalogue_proto::StopVertexIds* Arena::CreateMaybeMessage<::transport_catalogue_proto::StopVertexIds>(Arena*);
template<> ::transport_catalogue_proto::TransportRouter* Arena::CreateMaybeMessage<::transport_catalogue_proto::TransportRouter>(Arena*);
template<> ::transport_catalogue_proto::VertexInfo* Arena::CreateMaybeMessage<::transport_catalogue_proto::VertexInfo>(Arena*);
template<> ::transport_catalogue_proto::WaitEdgeInfo* Arena::CreateMaybeMessage<::transport_catalogue_proto::WaitEdgeInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace transport_catalogue_proto {

// ===================================================================

class RoutingSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.RoutingSettings) */ {
 public:
  inline RoutingSettings() : RoutingSettings(nullptr) {}
  ~RoutingSettings() override;
  explicit PROTOBUF_CONSTEXPR RoutingSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoutingSettings(const RoutingSettings& from);
  RoutingSettings(RoutingSettings&& from) noexcept
    : RoutingSettings() {
    *this = ::std::move(from);
  }

  inline RoutingSettings& operator=(const RoutingSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingSettings& operator=(RoutingSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoutingSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutingSettings* internal_default_instance() {
    return reinterpret_cast<const RoutingSettings*>(
               &_RoutingSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RoutingSettings& a, RoutingSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutingSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoutingSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoutingSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoutingSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoutingSettings& from) {
    RoutingSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.RoutingSettings";
  }
  protected:
  explicit RoutingSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusVelocityKmhFieldNumber = 2,
    kBusWaitTimeMinutesFieldNumber = 1,
  };
  // double bus_velocity_kmh = 2;
  void clear_bus_velocity_kmh();
  double bus_velocity_kmh() const;
  void set_bus_velocity_kmh(double value);
  private:
  double _internal_bus_velocity_kmh() const;
  void _internal_set_bus_velocity_kmh(double value);
  public:

  // int32 bus_wait_time_minutes = 1;
  void clear_bus_wait_time_minutes();
  int32_t bus_wait_time_minutes() const;
  void set_bus_wait_time_minutes(int32_t value);
  private:
  int32_t _internal_bus_wait_time_minutes() const;
  void _internal_set_bus_wait_time_minutes(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.RoutingSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double bus_velocity_kmh_;
    int32_t bus_wait_time_minutes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class StopVertexIds final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.StopVertexIds) */ {
 public:
  inline StopVertexIds() : StopVertexIds(nullptr) {}
  ~StopVertexIds() override;
  explicit PROTOBUF_CONSTEXPR StopVertexIds(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopVertexIds(const StopVertexIds& from);
  StopVertexIds(StopVertexIds&& from) noexcept
    : StopVertexIds() {
    *this = ::std::move(from);
  }

  inline StopVertexIds& operator=(const StopVertexIds& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopVertexIds& operator=(StopVertexIds&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopVertexIds& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopVertexIds* internal_default_instance() {
    return reinterpret_cast<const StopVertexIds*>(
               &_StopVertexIds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StopVertexIds& a, StopVertexIds& b) {
    a.Swap(&b);
  }
  inline void Swap(StopVertexIds* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopVertexIds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopVertexIds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopVertexIds>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopVertexIds& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StopVertexIds& from) {
    StopVertexIds::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopVertexIds* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.StopVertexIds";
  }
  protected:
  explicit StopVertexIds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopFieldNumber = 1,
    kInFieldNumber = 2,
    kOutFieldNumber = 3,
  };
  // uint32 stop = 1;
  void clear_stop();
  uint32_t stop() const;
  void set_stop(uint32_t value);
  private:
  uint32_t _internal_stop() const;
  void _internal_set_stop(uint32_t value);
  public:

  // uint32 in = 2;
  void clear_in();
  uint32_t in() const;
  void set_in(uint32_t value);
  private:
  uint32_t _internal_in() const;
  void _internal_set_in(uint32_t value);
  public:

  // uint32 out = 3;
  void clear_out();
  uint32_t out() const;
  void set_out(uint32_t value);
  private:
  uint32_t _internal_out() const;
  void _internal_set_out(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.StopVertexIds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t stop_;
    uint32_t in_;
    uint32_t out_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class VertexInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.VertexInfo) */ {
 public:
  inline VertexInfo() : VertexInfo(nullptr) {}
  ~VertexInfo() override;
  explicit PROTOBUF_CONSTEXPR VertexInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VertexInfo(const VertexInfo& from);
  VertexInfo(VertexInfo&& from) noexcept
    : VertexInfo() {
    *this = ::std::move(from);
  }

  inline VertexInfo& operator=(const VertexInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VertexInfo& operator=(VertexInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VertexInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const VertexInfo* internal_default_instance() {
    return reinterpret_cast<const VertexInfo*>(
               &_VertexInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VertexInfo& a, VertexInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VertexInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VertexInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VertexInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VertexInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VertexInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VertexInfo& from) {
    VertexInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VertexInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.VertexInfo";
  }
  protected:
  explicit VertexInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopFieldNumber = 1,
  };
  // uint32 stop = 1;
  void clear_stop();
  uint32_t stop() const;
  void set_stop(uint32_t value);
  private:
  uint32_t _internal_stop() const;
  void _internal_set_stop(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.VertexInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t stop_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class BusEdgeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.BusEdgeInfo) */ {
 public:
  inline BusEdgeInfo() : BusEdgeInfo(nullptr) {}
  ~BusEdgeInfo() override;
  explicit PROTOBUF_CONSTEXPR BusEdgeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BusEdgeInfo(const BusEdgeInfo& from);
  BusEdgeInfo(BusEdgeInfo&& from) noexcept
    : BusEdgeInfo() {
    *this = ::std::move(from);
  }

  inline BusEdgeInfo& operator=(const BusEdgeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BusEdgeInfo& operator=(BusEdgeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BusEdgeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BusEdgeInfo* internal_default_instance() {
    return reinterpret_cast<const BusEdgeInfo*>(
               &_BusEdgeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BusEdgeInfo& a, BusEdgeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BusEdgeInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BusEdgeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BusEdgeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BusEdgeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BusEdgeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BusEdgeInfo& from) {
    BusEdgeInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BusEdgeInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.BusEdgeInfo";
  }
  protected:
  explicit BusEdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusFieldNumber = 1,
    kSpanCountFieldNumber = 2,
  };
  // uint32 bus = 1;
  void clear_bus();
  uint32_t bus() const;
  void set_bus(uint32_t value);
  private:
  uint32_t _internal_bus() const;
  void _internal_set_bus(uint32_t value);
  public:

  // uint32 span_count = 2;
  void clear_span_count();
  uint32_t span_count() const;
  void set_span_count(uint32_t value);
  private:
  uint32_t _internal_span_count() const;
  void _internal_set_span_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.BusEdgeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t bus_;
    uint32_t span_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class WaitEdgeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.WaitEdgeInfo) */ {
 public:
  inline WaitEdgeInfo() : WaitEdgeInfo(nullptr) {}
  explicit PROTOBUF_CONSTEXPR WaitEdgeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WaitEdgeInfo(const WaitEdgeInfo& from);
  WaitEdgeInfo(WaitEdgeInfo&& from) noexcept
    : WaitEdgeInfo() {
    *this = ::std::move(from);
  }

  inline WaitEdgeInfo& operator=(const WaitEdgeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitEdgeInfo& operator=(WaitEdgeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WaitEdgeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const WaitEdgeInfo* internal_default_instance() {
    return reinterpret_cast<const WaitEdgeInfo*>(
               &_WaitEdgeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WaitEdgeInfo& a, WaitEdgeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(WaitEdgeInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitEdgeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WaitEdgeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WaitEdgeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const WaitEdgeInfo& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const WaitEdgeInfo& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.WaitEdgeInfo";
  }
  protected:
  explicit WaitEdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.WaitEdgeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class EdgeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.EdgeInfo) */ {
 public:
  inline EdgeInfo() : EdgeInfo(nullptr) {}
  ~EdgeInfo() override;
  explicit PROTOBUF_CONSTEXPR EdgeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdgeInfo(const EdgeInfo& from);
  EdgeInfo(EdgeInfo&& from) noexcept
    : EdgeInfo() {
    *this = ::std::move(from);
  }

  inline EdgeInfo& operator=(const EdgeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeInfo& operator=(EdgeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdgeInfo& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kBusData = 1,
    kWaitData = 2,
    DATA_NOT_SET = 0,
  };

  static inline const EdgeInfo* internal_default_instance() {
    return reinterpret_cast<const EdgeInfo*>(
               &_EdgeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EdgeInfo& a, EdgeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EdgeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EdgeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EdgeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EdgeInfo& from) {
    EdgeInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.EdgeInfo";
  }
  protected:
  explicit EdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusDataFieldNumber = 1,
    kWaitDataFieldNumber = 2,
  };
  // .transport_catalogue_proto.BusEdgeInfo bus_data = 1;
  bool has_bus_data() const;
  private:
  bool _internal_has_bus_data() const;
  public:
  void clear_bus_data();
  const ::transport_catalogue_proto::BusEdgeInfo& bus_data() const;
  PROTOBUF_NODISCARD ::transport_catalogue_proto::BusEdgeInfo* release_bus_data();
  ::transport_catalogue_proto::BusEdgeInfo* mutable_bus_data();
  void set_allocated_bus_data(::transport_catalogue_proto::BusEdgeInfo* bus_data);
  private:
  const ::transport_catalogue_proto::BusEdgeInfo& _internal_bus_data() const;
  ::transport_catalogue_proto::BusEdgeInfo* _internal_mutable_bus_data();
  public:
  void unsafe_arena_set_allocated_bus_data(
      ::transport_catalogue_proto::BusEdgeInfo* bus_data);
  ::transport_catalogue_proto::BusEdgeInfo* unsafe_arena_release_bus_data();

  // .transport_catalogue_proto.WaitEdgeInfo wait_data = 2;
  bool has_wait_data() const;
  private:
  bool _internal_has_wait_data() const;
  public:
  void clear_wait_data();
  const ::transport_catalogue_proto::WaitEdgeInfo& wait_data() const;
  PROTOBUF_NODISCARD ::transport_catalogue_proto::WaitEdgeInfo* release_wait_data();
  ::transport_catalogue_proto::WaitEdgeInfo* mutable_wait_data();
  void set_allocated_wait_data(::transport_catalogue_proto::WaitEdgeInfo* wait_data);
  private:
  const ::transport_catalogue_proto::WaitEdgeInfo& _internal_wait_data() const;
  ::transport_catalogue_proto::WaitEdgeInfo* _internal_mutable_wait_data();
  public:
  void unsafe_arena_set_allocated_wait_data(
      ::transport_catalogue_proto::WaitEdgeInfo* wait_data);
  ::transport_catalogue_proto::WaitEdgeInfo* unsafe_arena_release_wait_data();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.EdgeInfo)
 private:
  class _Internal;
  void set_has_bus_data();
  void set_has_wait_data();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union DataUnion {
      constexpr DataUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::transport_catalogue_proto::BusEdgeInfo* bus_data_;
      ::transport_catalogue_proto::WaitEdgeInfo* wait_data_;
    } data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class TransportRouter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.TransportRouter) */ {
 public:
  inline TransportRouter() : TransportRouter(nullptr) {}
  ~TransportRouter() override;
  explicit PROTOBUF_CONSTEXPR TransportRouter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportRouter(const TransportRouter& from);
  TransportRouter(TransportRouter&& from) noexcept
    : TransportRouter() {
    *this = ::std::move(from);
  }

  inline TransportRouter& operator=(const TransportRouter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportRouter& operator=(TransportRouter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportRouter& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportRouter* internal_default_instance() {
    return reinterpret_cast<const TransportRouter*>(
               &_TransportRouter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TransportRouter& a, TransportRouter& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportRouter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportRouter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransportRouter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransportRouter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportRouter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransportRouter& from) {
    TransportRouter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportRouter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.TransportRouter";
  }
  protected:
  explicit TransportRouter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsVertexIdsFieldNumber = 4,
    kVerticesInfoFieldNumber = 5,
    kEdgesInfoFieldNumber = 6,
    kRoutingSettingsFieldNumber = 1,
    kGraphFieldNumber = 2,
    kRouterFieldNumber = 3,
  };
  // repeated .transport_catalogue_proto.StopVertexIds stops_vertex_ids = 4;
  int stops_vertex_ids_size() const;
  private:
  int _internal_stops_vertex_ids_size() const;
  public:
  void clear_stops_vertex_ids();
  ::transport_catalogue_proto::StopVertexIds* mutable_stops_vertex_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::StopVertexIds >*
      mutable_stops_vertex_ids();
  private:
  const ::transport_catalogue_proto::StopVertexIds& _internal_stops_vertex_ids(int index) const;
  ::transport_catalogue_proto::StopVertexIds* _internal_add_stops_vertex_ids();
  public:
  const ::transport_catalogue_proto::StopVertexIds& stops_vertex_ids(int index) const;
  ::transport_catalogue_proto::StopVertexIds* add_stops_vertex_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::StopVertexIds >&
      stops_vertex_ids() const;

  // repeated .transport_catalogue_proto.VertexInfo vertices_info = 5;
  int vertices_info_size() const;
  private:
  int _internal_vertices_info_size() const;
  public:
  void clear_vertices_info();
  ::transport_catalogue_proto::VertexInfo* mutable_vertices_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::VertexInfo >*
      mutable_vertices_info();
  private:
  const ::transport_catalogue_proto::VertexInfo& _internal_vertices_info(int index) const;
  ::transport_catalogue_proto::VertexInfo* _internal_add_vertices_info();
  public:
  const ::transport_catalogue_proto::VertexInfo& vertices_info(int index) const;
  ::transport_catalogue_proto::VertexInfo* add_vertices_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::VertexInfo >&
      vertices_info() const;

  // repeated .transport_catalogue_proto.EdgeInfo edges_info = 6;
  int edges_info_size() const;
  private:
  int _internal_edges_info_size() const;
  public:
  void clear_edges_info();
  ::transport_catalogue_proto::EdgeInfo* mutable_edges_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::EdgeInfo >*
      mutable_edges_info();
  private:
  const ::transport_catalogue_proto::EdgeInfo& _internal_edges_info(int index) const;
  ::transport_catalogue_proto::EdgeInfo* _internal_add_edges_info();
  public:
  const ::transport_catalogue_proto::EdgeInfo& edges_info(int index) const;
  ::transport_catalogue_proto::EdgeInfo* add_edges_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::EdgeInfo >&
      edges_info() const;

  // .transport_catalogue_proto.RoutingSettings routing_settings = 1;
  bool has_routing_settings() const;
  private:
  bool _internal_has_routing_settings() const;
  public:
  void clear_routing_settings();
  const ::transport_catalogue_proto::RoutingSettings& routing_settings() const;
  PROTOBUF_NODISCARD ::transport_catalogue_proto::RoutingSettings* release_routing_settings();
  ::transport_catalogue_proto::RoutingSettings* mutable_routing_settings();
  void set_allocated_routing_settings(::transport_catalogue_proto::RoutingSettings* routing_settings);
  private:
  const ::transport_catalogue_proto::RoutingSettings& _internal_routing_settings() const;
  ::transport_catalogue_proto::RoutingSettings* _internal_mutable_routing_settings();
  public:
  void unsafe_arena_set_allocated_routing_settings(
      ::transport_catalogue_proto::RoutingSettings* routing_settings);
  ::transport_catalogue_proto::RoutingSettings* unsafe_arena_release_routing_settings();

  // .graph_proto.DirectedWeightedGraph graph = 2;
  bool has_graph() const;
  private:
  bool _internal_has_graph() const;
  public:
  void clear_graph();
  const ::graph_proto::DirectedWeightedGraph& graph() const;
  PROTOBUF_NODISCARD ::graph_proto::DirectedWeightedGraph* release_graph();
  ::graph_proto::DirectedWeightedGraph* mutable_graph();
  void set_allocated_graph(::graph_proto::DirectedWeightedGraph* graph);
  private:
  const ::graph_proto::DirectedWeightedGraph& _internal_graph() const;
  ::graph_proto::DirectedWeightedGraph* _internal_mutable_graph();
  public:
  void unsafe_arena_set_allocated_graph(
      ::graph_proto::DirectedWeightedGraph* graph);
  ::graph_proto::DirectedWeightedGraph* unsafe_arena_release_graph();

  // .graph_proto.Router router = 3;
  bool has_router() const;
  private:
  bool _internal_has_router() const;
  public:
  void clear_router();
  const ::graph_proto::Router& router() const;
  PROTOBUF_NODISCARD ::graph_proto::Router* release_router();
  ::graph_proto::Router* mutable_router();
  void set_allocated_router(::graph_proto::Router* router);
  private:
  const ::graph_proto::Router& _internal_router() const;
  ::graph_proto::Router* _internal_mutable_router();
  public:
  void unsafe_arena_set_allocated_router(
      ::graph_proto::Router* router);
  ::graph_proto::Router* unsafe_arena_release_router();

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.TransportRouter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::StopVertexIds > stops_vertex_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::VertexInfo > vertices_info_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::EdgeInfo > edges_info_;
    ::transport_catalogue_proto::RoutingSettings* routing_settings_;
    ::graph_proto::DirectedWeightedGraph* graph_;
    ::graph_proto::Router* router_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoutingSettings

// int32 bus_wait_time_minutes = 1;
inline void RoutingSettings::clear_bus_wait_time_minutes() {
  _impl_.bus_wait_time_minutes_ = 0;
}
inline int32_t RoutingSettings::_internal_bus_wait_time_minutes() const {
  return _impl_.bus_wait_time_minutes_;
}
inline int32_t RoutingSettings::bus_wait_time_minutes() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.RoutingSettings.bus_wait_time_minutes)
  return _internal_bus_wait_time_minutes();
}
inline void RoutingSettings::_internal_set_bus_wait_time_minutes(int32_t value) {
  
  _impl_.bus_wait_time_minutes_ = value;
}
inline void RoutingSettings::set_bus_wait_time_minutes(int32_t value) {
  _internal_set_bus_wait_time_minutes(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.RoutingSettings.bus_wait_time_minutes)
}

// double bus_velocity_kmh = 2;
inline void RoutingSettings::clear_bus_velocity_kmh() {
  _impl_.bus_velocity_kmh_ = 0;
}
inline double RoutingSettings::_internal_bus_velocity_kmh() const {
  return _impl_.bus_velocity_kmh_;
}
inline double RoutingSettings::bus_velocity_kmh() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.RoutingSettings.bus_velocity_kmh)
  return _internal_bus_velocity_kmh();
}
inline void RoutingSettings::_internal_set_bus_velocity_kmh(double value) {
  
  _impl_.bus_velocity_kmh_ = value;
}
inline void RoutingSettings::set_bus_velocity_kmh(double value) {
  _internal_set_bus_velocity_kmh(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.RoutingSettings.bus_velocity_kmh)
}

// -------------------------------------------------------------------

// StopVertexIds

// uint32 stop = 1;
inline void StopVertexIds::clear_stop() {
  _impl_.stop_ = 0u;
}
inline uint32_t StopVertexIds::_internal_stop() const {
  return _impl_.stop_;
}
inline uint32_t StopVertexIds::stop() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.StopVertexIds.stop)
  return _internal_stop();
}
inline void StopVertexIds::_internal_set_stop(uint32_t value) {
  
  _impl_.stop_ = value;
}
inline void StopVertexIds::set_stop(uint32_t value) {
  _internal_set_stop(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.StopVertexIds.stop)
}

// uint32 in = 2;
inline void StopVertexIds::clear_in() {
  _impl_.in_ = 0u;
}
inline uint32_t StopVertexIds::_internal_in() const {
  return _impl_.in_;
}
inline uint32_t StopVertexIds::in() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.StopVertexIds.in)
  return _internal_in();
}
inline void StopVertexIds::_internal_set_in(uint32_t value) {
  
  _impl_.in_ = value;
}
inline void StopVertexIds::set_in(uint32_t value) {
  _internal_set_in(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.StopVertexIds.in)
}

// uint32 out = 3;
inline void StopVertexIds::clear_out() {
  _impl_.out_ = 0u;
}
inline uint32_t StopVertexIds::_internal_out() const {
  return _impl_.out_;
}
inline uint32_t StopVertexIds::out() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.StopVertexIds.out)
  return _internal_out();
}
inline void StopVertexIds::_internal_set_out(uint32_t value) {
  
  _impl_.out_ = value;
}
inline void StopVertexIds::set_out(uint32_t value) {
  _internal_set_out(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.StopVertexIds.out)
}

// -------------------------------------------------------------------

// VertexInfo

// uint32 stop = 1;
inline void VertexInfo::clear_stop() {
  _impl_.stop_ = 0u;
}
inline uint32_t VertexInfo::_internal_stop() const {
  return _impl_.stop_;
}
inline uint32_t VertexInfo::stop() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.VertexInfo.stop)
  return _internal_stop();
}
inline void VertexInfo::_internal_set_stop(uint32_t value) {
  
  _impl_.stop_ = value;
}
inline void VertexInfo::set_stop(uint32_t value) {
  _internal_set_stop(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.VertexInfo.stop)
}

// -------------------------------------------------------------------

// BusEdgeInfo

// uint32 bus = 1;
inline void BusEdgeInfo::clear_bus() {
  _impl_.bus_ = 0u;
}
inline uint32_t BusEdgeInfo::_internal_bus() const {
  return _impl_.bus_;
}
inline uint32_t BusEdgeInfo::bus() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.BusEdgeInfo.bus)
  return _internal_bus();
}
inline void BusEdgeInfo::_internal_set_bus(uint32_t value) {
  
  _impl_.bus_ = value;
}
inline void BusEdgeInfo::set_bus(uint32_t value) {
  _internal_set_bus(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.BusEdgeInfo.bus)
}

// uint32 span_count = 2;
inline void BusEdgeInfo::clear_span_count() {
  _impl_.span_count_ = 0u;
}
inline uint32_t BusEdgeInfo::_internal_span_count() const {
  return _impl_.span_count_;
}
inline uint32_t BusEdgeInfo::span_count() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.BusEdgeInfo.span_count)
  return _internal_span_count();
}
inline void BusEdgeInfo::_internal_set_span_count(uint32_t value) {
  
  _impl_.span_count_ = value;
}
inline void BusEdgeInfo::set_span_count(uint32_t value) {
  _internal_set_span_count(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.BusEdgeInfo.span_count)
}

// -------------------------------------------------------------------

// WaitEdgeInfo

// -------------------------------------------------------------------

// EdgeInfo

// .transport_catalogue_proto.BusEdgeInfo bus_data = 1;
inline bool EdgeInfo::_internal_has_bus_data() const {
  return data_case() == kBusData;
}
inline bool EdgeInfo::has_bus_data() const {
  return _internal_has_bus_data();
}
inline void EdgeInfo::set_has_bus_data() {
  _impl_._oneof_case_[0] = kBusData;
}
inline void EdgeInfo::clear_bus_data() {
  if (_internal_has_bus_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.bus_data_;
    }
    clear_has_data();
  }
}
inline ::transport_catalogue_proto::BusEdgeInfo* EdgeInfo::release_bus_data() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.EdgeInfo.bus_data)
  if (_internal_has_bus_data()) {
    clear_has_data();
    ::transport_catalogue_proto::BusEdgeInfo* temp = _impl_.data_.bus_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.bus_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::transport_catalogue_proto::BusEdgeInfo& EdgeInfo::_internal_bus_data() const {
  return _internal_has_bus_data()
      ? *_impl_.data_.bus_data_
      : reinterpret_cast< ::transport_catalogue_proto::BusEdgeInfo&>(::transport_catalogue_proto::_BusEdgeInfo_default_instance_);
}
inline const ::transport_catalogue_proto::BusEdgeInfo& EdgeInfo::bus_data() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.EdgeInfo.bus_data)
  return _internal_bus_data();
}
inline ::transport_catalogue_proto::BusEdgeInfo* EdgeInfo::unsafe_arena_release_bus_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transport_catalogue_proto.EdgeInfo.bus_data)
  if (_internal_has_bus_data()) {
    clear_has_data();
    ::transport_catalogue_proto::BusEdgeInfo* temp = _impl_.data_.bus_data_;
    _impl_.data_.bus_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EdgeInfo::unsafe_arena_set_allocated_bus_data(::transport_catalogue_proto::BusEdgeInfo* bus_data) {
  clear_data();
  if (bus_data) {
    set_has_bus_data();
    _impl_.data_.bus_data_ = bus_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_proto.EdgeInfo.bus_data)
}
inline ::transport_catalogue_proto::BusEdgeInfo* EdgeInfo::_internal_mutable_bus_data() {
  if (!_internal_has_bus_data()) {
    clear_data();
    set_has_bus_data();
    _impl_.data_.bus_data_ = CreateMaybeMessage< ::transport_catalogue_proto::BusEdgeInfo >(GetArenaForAllocation());
  }
  return _impl_.data_.bus_data_;
}
inline ::transport_catalogue_proto::BusEdgeInfo* EdgeInfo::mutable_bus_data() {
  ::transport_catalogue_proto::BusEdgeInfo* _msg = _internal_mutable_bus_data();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.EdgeInfo.bus_data)
  return _msg;
}

// .transport_catalogue_proto.WaitEdgeInfo wait_data = 2;
inline bool EdgeInfo::_internal_has_wait_data() const {
  return data_case() == kWaitData;
}
inline bool EdgeInfo::has_wait_data() const {
  return _internal_has_wait_data();
}
inline void EdgeInfo::set_has_wait_data() {
  _impl_._oneof_case_[0] = kWaitData;
}
inline void EdgeInfo::clear_wait_data() {
  if (_internal_has_wait_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.wait_data_;
    }
    clear_has_data();
  }
}
inline ::transport_catalogue_proto::WaitEdgeInfo* EdgeInfo::release_wait_data() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.EdgeInfo.wait_data)
  if (_internal_has_wait_data()) {
    clear_has_data();
    ::transport_catalogue_proto::WaitEdgeInfo* temp = _impl_.data_.wait_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.wait_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::transport_catalogue_proto::WaitEdgeInfo& EdgeInfo::_internal_wait_data() const {
  return _internal_has_wait_data()
      ? *_impl_.data_.wait_data_
      : reinterpret_cast< ::transport_catalogue_proto::WaitEdgeInfo&>(::transport_catalogue_proto::_WaitEdgeInfo_default_instance_);
}
inline const ::transport_catalogue_proto::WaitEdgeInfo& EdgeInfo::wait_data() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.EdgeInfo.wait_data)
  return _internal_wait_data();
}
inline ::transport_catalogue_proto::WaitEdgeInfo* EdgeInfo::unsafe_arena_release_wait_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transport_catalogue_proto.EdgeInfo.wait_data)
  if (_internal_has_wait_data()) {
    clear_has_data();
    ::transport_catalogue_proto::WaitEdgeInfo* temp = _impl_.data_.wait_data_;
    _impl_.data_.wait_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EdgeInfo::unsafe_arena_set_allocated_wait_data(::transport_catalogue_proto::WaitEdgeInfo* wait_data) {
  clear_data();
  if (wait_data) {
    set_has_wait_data();
    _impl_.data_.wait_data_ = wait_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_proto.EdgeInfo.wait_data)
}
inline ::transport_catalogue_proto::WaitEdgeInfo* EdgeInfo::_internal_mutable_wait_data() {
  if (!_internal_has_wait_data()) {
    clear_data();
    set_has_wait_data();
    _impl_.data_.wait_data_ = CreateMaybeMessage< ::transport_catalogue_proto::WaitEdgeInfo >(GetArenaForAllocation());
  }
  return _impl_.data_.wait_data_;
}
inline ::transport_catalogue_proto::WaitEdgeInfo* EdgeInfo::mutable_wait_data() {
  ::transport_catalogue_proto::WaitEdgeInfo* _msg = _internal_mutable_wait_data();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.EdgeInfo.wait_data)
  return _msg;
}

inline bool EdgeInfo::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void EdgeInfo::clear_has_data() {
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}
inline EdgeInfo::DataCase EdgeInfo::data_case() const {
  return EdgeInfo::DataCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// TransportRouter

// .transport_catalogue_proto.RoutingSettings routing_settings = 1;
inline bool TransportRouter::_internal_has_routing_settings() const {
  return this != internal_default_instance() && _impl_.routing_settings_ != nullptr;
}
inline bool TransportRouter::has_routing_settings() const {
  return _internal_has_routing_settings();
}
inline void TransportRouter::clear_routing_settings() {
  if (GetArenaForAllocation() == nullptr && _impl_.routing_settings_ != nullptr) {
    delete _impl_.routing_settings_;
  }
  _impl_.routing_settings_ = nullptr;
}
inline const ::transport_catalogue_proto::RoutingSettings& TransportRouter::_internal_routing_settings() const {
  const ::transport_catalogue_proto::RoutingSettings* p = _impl_.routing_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_proto::RoutingSettings&>(
      ::transport_catalogue_proto::_RoutingSettings_default_instance_);
}
inline const ::transport_catalogue_proto::RoutingSettings& TransportRouter::routing_settings() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.TransportRouter.routing_settings)
  return _internal_routing_settings();
}
inline void TransportRouter::unsafe_arena_set_allocated_routing_settings(
    ::transport_catalogue_proto::RoutingSettings* routing_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.routing_settings_);
  }
  _impl_.routing_settings_ = routing_settings;
  if (routing_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_proto.TransportRouter.routing_settings)
}
inline ::transport_catalogue_proto::RoutingSettings* TransportRouter::release_routing_settings() {
  
  ::transport_catalogue_proto::RoutingSettings* temp = _impl_.routing_settings_;
  _impl_.routing_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::transport_catalogue_proto::RoutingSettings* TransportRouter::unsafe_arena_release_routing_settings() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.TransportRouter.routing_settings)
  
  ::transport_catalogue_proto::RoutingSettings* temp = _impl_.routing_settings_;
  _impl_.routing_settings_ = nullptr;
  return temp;
}
inline ::transport_catalogue_proto::RoutingSettings* TransportRouter::_internal_mutable_routing_settings() {
  
  if (_impl_.routing_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_proto::RoutingSettings>(GetArenaForAllocation());
    _impl_.routing_settings_ = p;
  }
  return _impl_.routing_settings_;
}
inline ::transport_catalogue_proto::RoutingSettings* TransportRouter::mutable_routing_settings() {
  ::transport_catalogue_proto::RoutingSettings* _msg = _internal_mutable_routing_settings();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.TransportRouter.routing_settings)
  return _msg;
}
inline void TransportRouter::set_allocated_routing_settings(::transport_catalogue_proto::RoutingSettings* routing_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.routing_settings_;
  }
  if (routing_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(routing_settings);
    if (message_arena != submessage_arena) {
      routing_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_settings, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.routing_settings_ = routing_settings;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_proto.TransportRouter.routing_settings)
}

// .graph_proto.DirectedWeightedGraph graph = 2;
inline bool TransportRouter::_internal_has_graph() const {
  return this != internal_default_instance() && _impl_.graph_ != nullptr;
}
inline bool TransportRouter::has_graph() const {
  return _internal_has_graph();
}
inline const ::graph_proto::DirectedWeightedGraph& TransportRouter::_internal_graph() const {
  const ::graph_proto::DirectedWeightedGraph* p = _impl_.graph_;
  return p != nullptr ? *p : reinterpret_cast<const ::graph_proto::DirectedWeightedGraph&>(
      ::graph_proto::_DirectedWeightedGraph_default_instance_);
}
inline const ::graph_proto::DirectedWeightedGraph& TransportRouter::graph() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.TransportRouter.graph)
  return _internal_graph();
}
inline void TransportRouter::unsafe_arena_set_allocated_graph(
    ::graph_proto::DirectedWeightedGraph* graph) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.graph_);
  }
  _impl_.graph_ = graph;
  if (graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_proto.TransportRouter.graph)
}
inline ::graph_proto::DirectedWeightedGraph* TransportRouter::release_graph() {
  
  ::graph_proto::DirectedWeightedGraph* temp = _impl_.graph_;
  _impl_.graph_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::graph_proto::DirectedWeightedGraph* TransportRouter::unsafe_arena_release_graph() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.TransportRouter.graph)
  
  ::graph_proto::DirectedWeightedGraph* temp = _impl_.graph_;
  _impl_.graph_ = nullptr;
  return temp;
}
inline ::graph_proto::DirectedWeightedGraph* TransportRouter::_internal_mutable_graph() {
  
  if (_impl_.graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::graph_proto::DirectedWeightedGraph>(GetArenaForAllocation());
    _impl_.graph_ = p;
  }
  return _impl_.graph_;
}
inline ::graph_proto::DirectedWeightedGraph* TransportRouter::mutable_graph() {
  ::graph_proto::DirectedWeightedGraph* _msg = _internal_mutable_graph();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.TransportRouter.graph)
  return _msg;
}
inline void TransportRouter::set_allocated_graph(::graph_proto::DirectedWeightedGraph* graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.graph_);
  }
  if (graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph));
    if (message_arena != submessage_arena) {
      graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_proto.TransportRouter.graph)
}

// .graph_proto.Router router = 3;
inline bool TransportRouter::_internal_has_router() const {
  return this != internal_default_instance() && _impl_.router_ != nullptr;
}
inline bool TransportRouter::has_router() const {
  return _internal_has_router();
}
inline const ::graph_proto::Router& TransportRouter::_internal_router() const {
  const ::graph_proto::Router* p = _impl_.router_;
  return p != nullptr ? *p : reinterpret_cast<const ::graph_proto::Router&>(
      ::graph_proto::_Router_default_instance_);
}
inline const ::graph_proto::Router& TransportRouter::router() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.TransportRouter.router)
  return _internal_router();
}
inline void TransportRouter::unsafe_arena_set_allocated_router(
    ::graph_proto::Router* router) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.router_);
  }
  _impl_.router_ = router;
  if (router) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_proto.TransportRouter.router)
}
inline ::graph_proto::Router* TransportRouter::release_router() {
  
  ::graph_proto::Router* temp = _impl_.router_;
  _impl_.router_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::graph_proto::Router* TransportRouter::unsafe_arena_release_router() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.TransportRouter.router)
  
  ::graph_proto::Router* temp = _impl_.router_;
  _impl_.router_ = nullptr;
  return temp;
}
inline ::graph_proto::Router* TransportRouter::_internal_mutable_router() {
  
  if (_impl_.router_ == nullptr) {
    auto* p = CreateMaybeMessage<::graph_proto::Router>(GetArenaForAllocation());
    _impl_.router_ = p;
  }
  return _impl_.router_;
}
inline ::graph_proto::Router* TransportRouter::mutable_router() {
  ::graph_proto::Router* _msg = _internal_mutable_router();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.TransportRouter.router)
  return _msg;
}
inline void TransportRouter::set_allocated_router(::graph_proto::Router* router) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.router_);
  }
  if (router) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router));
    if (message_arena != submessage_arena) {
      router = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, router, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.router_ = router;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_proto.TransportRouter.router)
}

// repeated .transport_catalogue_proto.StopVertexIds stops_vertex_ids = 4;
inline int TransportRouter::_internal_stops_vertex_ids_size() const {
  return _impl_.stops_vertex_ids_.size();
}
inline int TransportRouter::stops_vertex_ids_size() const {
  return _internal_stops_vertex_ids_size();
}
inline void TransportRouter::clear_stops_vertex_ids() {
  _impl_.stops_vertex_ids_.Clear();
}
inline ::transport_catalogue_proto::StopVertexIds* TransportRouter::mutable_stops_vertex_ids(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.TransportRouter.stops_vertex_ids)
  return _impl_.stops_vertex_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::StopVertexIds >*
TransportRouter::mutable_stops_vertex_ids() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_proto.TransportRouter.stops_vertex_ids)
  return &_impl_.stops_vertex_ids_;
}
inline const ::transport_catalogue_proto::StopVertexIds& TransportRouter::_internal_stops_vertex_ids(int index) const {
  return _impl_.stops_vertex_ids_.Get(index);
}
inline const ::transport_catalogue_proto::StopVertexIds& TransportRouter::stops_vertex_ids(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.TransportRouter.stops_vertex_ids)
  return _internal_stops_vertex_ids(index);
}
inline ::transport_catalogue_proto::StopVertexIds* TransportRouter::_internal_add_stops_vertex_ids() {
  return _impl_.stops_vertex_ids_.Add();
}
inline ::transport_catalogue_proto::StopVertexIds* TransportRouter::add_stops_vertex_ids() {
  ::transport_catalogue_proto::StopVertexIds* _add = _internal_add_stops_vertex_ids();
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.TransportRouter.stops_vertex_ids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::StopVertexIds >&
TransportRouter::stops_vertex_ids() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_proto.TransportRouter.stops_vertex_ids)
  return _impl_.stops_vertex_ids_;
}

// repeated .transport_catalogue_proto.VertexInfo vertices_info = 5;
inline int TransportRouter::_internal_vertices_info_size() const {
  return _impl_.vertices_info_.size();
}
inline int TransportRouter::vertices_info_size() const {
  return _internal_vertices_info_size();
}
inline void TransportRouter::clear_vertices_info() {
  _impl_.vertices_info_.Clear();
}
inline ::transport_catalogue_proto::VertexInfo* TransportRouter::mutable_vertices_info(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.TransportRouter.vertices_info)
  return _impl_.vertices_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::VertexInfo >*
TransportRouter::mutable_vertices_info() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_proto.TransportRouter.vertices_info)
  return &_impl_.vertices_info_;
}
inline const ::transport_catalogue_proto::VertexInfo& TransportRouter::_internal_vertices_info(int index) const {
  return _impl_.vertices_info_.Get(index);
}
inline const ::transport_catalogue_proto::VertexInfo& TransportRouter::vertices_info(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.TransportRouter.vertices_info)
  return _internal_vertices_info(index);
}
inline ::transport_catalogue_proto::VertexInfo* TransportRouter::_internal_add_vertices_info() {
  return _impl_.vertices_info_.Add();
}
inline ::transport_catalogue_proto::VertexInfo* TransportRouter::add_vertices_info() {
  ::transport_catalogue_proto::VertexInfo* _add = _internal_add_vertices_info();
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.TransportRouter.vertices_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::VertexInfo >&
TransportRouter::vertices_info() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_proto.TransportRouter.vertices_info)
  return _impl_.vertices_info_;
}

// repeated .transport_catalogue_proto.EdgeInfo edges_info = 6;
inline int TransportRouter::_internal_edges_info_size() const {
  return _impl_.edges_info_.size();
}
inline int TransportRouter::edges_info_size() const {
  return _internal_edges_info_size();
}
inline void TransportRouter::clear_edges_info() {
  _impl_.edges_info_.Clear();
}
inline ::transport_catalogue_proto::EdgeInfo* TransportRouter::mutable_edges_info(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.TransportRouter.edges_info)
  return _impl_.edges_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::EdgeInfo >*
TransportRouter::mutable_edges_info() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_proto.TransportRouter.edges_info)
  return &_impl_.edges_info_;
}
inline const ::transport_catalogue_proto::EdgeInfo& TransportRouter::_internal_edges_info(int index) const {
  return _impl_.edges_info_.Get(index);
}
inline const ::transport_catalogue_proto::EdgeInfo& TransportRouter::edges_info(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.TransportRouter.edges_info)
  return _internal_edges_info(index);
}
inline ::transport_catalogue_proto::EdgeInfo* TransportRouter::_internal_add_edges_info() {
  return _impl_.edges_info_.Add();
}
inline ::transport_catalogue_proto::EdgeInfo* TransportRouter::add_edges_info() {
  ::transport_catalogue_proto::EdgeInfo* _add = _internal_add_edges_info();
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.TransportRouter.edges_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::EdgeInfo >&
TransportRouter::edges_info() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_proto.TransportRouter.edges_info)
  return _impl_.edges_info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace transport_catalogue_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto
